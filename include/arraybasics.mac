/******************************************************************************
 *
 * Macros for basic operations on arrays.
 *
 ******************************************************************************/

/******************************************************************************
 *
 * @fn int dim(<a>[d:shp] arr)
 *
 * @brief Yields an array's dimensionality.
 *
 ******************************************************************************/

#define DIM(typ, postfix, zval, oval)                                          \
inline int dim(typ[d:shp] arr)                                                 \
{                                                                              \
    return d;                                                                  \
}

/******************************************************************************
 *
 * @fn int[d] shape(<a>[d:shp] arr)
 *
 * @brief Yields an array's shape vector.
 *
 ******************************************************************************/

#define SHAPE(typ, postfix, zval, oval)                                        \
inline int[d] shape(typ[d:shp] arr)                                            \
{                                                                              \
    return shp;                                                                \
}

/******************************************************************************
 *
 * @fn <a>[i:ishp] sel(int[o] idx, <a>[o:oshp,i:ishp] arr)
 *
 * @brief Selects the subarray of the array at position idx, provided the index
 * vector is no longer than the rank of the array, and each index element is no
 * longer than the corresponding array shape element.
 *
 ******************************************************************************/

#define SEL_VxA(typ, postfix, zval, oval)                                      \
inline typ[i:ishp] sel(int[o] idx, typ[o:oshp,i:ishp] arr)                     \
    | _all_V_(_le_SxV_(0, idx)), _all_V_(_lt_VxV_(idx, oshp))                  \
{                                                                              \
    return { iv -> _sel_VxA_(_cat_VxV_(idx, iv), arr) | iv < ishp };           \
}

#define SEL_SxA(typ, postfix, zval, oval)                                      \
inline typ[d:shp] sel(int idx, typ[n,d:shp] arr)                               \
    | _le_SxS_(0, idx), _lt_SxS_(idx, n)                                       \
{                                                                              \
    return sel([idx], arr);                                                    \
}

#define SEL(typ, postfix, zval, oval)                                          \
SEL_VxA(typ, postfix, zval, oval)                                              \
SEL_SxA(typ, postfix, zval, oval)

/******************************************************************************
 *
 * @fn <a>[d:shp] reshape(int[d] shp, <a>[*] arr)
 *
 * @brief Creates a new array with identical data vector but new shape, provided
 * the length of the data vector matches the product of the new shape vector.
 *
 * @todo Requires a type pattern constraint that checks whether prod(shp) ==
 * prod(shape(arr)). But prod is in ArrayTransform, which would introduce A
 * circular dependency. We need to find a nice solution.
 *
 ******************************************************************************/

#define RESHAPE(typ, postfix, zval, oval)                                      \
inline typ[d:shp] reshape(int[d] shp, typ[*] arr)                              \
    | _all_V_(_le_SxV_(0, shp))                                                \
{                                                                              \
    return _reshape_VxA_(shp, arr);                                            \
}

/******************************************************************************
 *
 * @fn <a>[o:oshp,i:ishp] genarray(int[o] oshp, <a>[i:ishp] val)
 *
 * @brief Generates a new array from the given shape and default val.
 *
 ******************************************************************************/

#define GENARRAY(typ, postfix, zval, oval)                                     \
inline typ[o:oshp,i:ishp] genarray(int[o] oshp, typ[i:ishp] val)               \
    | _all_V_(_le_SxV_(0, oshp))                                               \
{                                                                              \
    return { iv -> val | iv < oshp };                                          \
}

/******************************************************************************
 *
 * @fn <a>[d:shp] modarray(<a>[d:shp] arr, int[d] idx, <a> val)
 *
 * @brief modifies the element of the array at position idx.
 *
 ******************************************************************************/

#define MODARRAY_AxVxA(typ, postfix, zval, oval)                               \
inline typ[o:oshp,i:ishp] modarray(typ[o:oshp,i:ishp] arr, int[o] idx, typ[i:ishp] val)\
    | _all_V_(_le_SxV_(0, idx)), _all_V_(_lt_VxV_(idx, oshp))                  \
{                                                                              \
    return with {                                                              \
        (idx <= iv <= idx) : val;                                              \
    } : modarray(arr);                                                         \
}

#define MODARRAY_AxVxS(typ, postfix, zval, oval)                               \
inline typ[d:shp] modarray(typ[d:shp] arr, int[d] idx, typ val)                \
    | _all_V_(_le_SxV_(0, idx)), _all_V_(_lt_VxV_(idx, shp))                   \
{                                                                              \
    return _modarray_AxVxS_(arr, idx, val);                                    \
}

#define MODARRAY_AxSxA(typ, postfix, zval, oval)                               \
inline typ[n,i:ishp] modarray(typ[n,i:ishp] arr, int idx, typ[i:ishp] val)     \
    | _le_SxS_(0, idx), _lt_SxS_(idx, n)                                       \
{                                                                              \
    return modarray(arr, [idx], val);                                          \
}

#define MODARRAY(typ, postfix, zval, oval)                                     \
MODARRAY_AxVxA(typ, postfix, zval, oval)                                       \
MODARRAY_AxVxS(typ, postfix, zval, oval)                                       \
MODARRAY_AxSxA(typ, postfix, zval, oval)
