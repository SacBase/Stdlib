/**
 * @file
 * @defgroup hiding Hiding
 *
 * @brief This module is for hiding type information.
 *
 * It is commonly used for static inputs and is intentioned for benchmarking.
 *
 * Some functions take a single argument and hide the value, shape or
 * dimensionality information of the input. Others in addition take an
 * integer. This allows for calls to inlined kernel functions in a loop
 * where where the call must be repeated N times for benchmarking.
 *
 * Here is an example:
 * ~~~~
 *    for( i=0 ; i < N ; i}}) {
 *      res[[i]] = kernel( hideValue( ip1, i), hideValue( ip2, i), ...);
 *    }
 * ~~~~
 * The above code computes kernel N times even if kernel is inlined.
 *
 * @{
 */
module Hiding;

export all;

use Array: all;

/*
 * AKV -> AKS
 * AKS -> AKS
 * AKD -> AKD
 * AUD -> AUD
 * SCALAR -> SCALAR
 */
#define HIDEVALUE( TYPE)                                  \
inline                                                    \
TYPE[*] hideValue( TYPE[*] in)                            \
{                                                         \
  return( _hideValue_SxA_( 0, in));                       \
}                                                         \
inline                                                    \
TYPE[*] hideValue( int i, TYPE[*] in)                     \
{                                                         \
  return( _hideValue_SxA_( i, in));                       \
}
HIDEVALUE( int)
HIDEVALUE( char)
HIDEVALUE( float)
HIDEVALUE( double)
HIDEVALUE( bool)

/*
 * AKV -> AKD
 * AKS -> AKD
 * AKD -> AKD
 * AUD -> AUD
 * SCALAR -> SCALAR
 */
#define HIDESHAPE( TYPE)                               \
inline                                                 \
TYPE[*] hideShape( TYPE[*] in)                         \
{                                                      \
  return( _hideShape_SxA_( 0, in));                    \
}                                                      \
inline                                                 \
TYPE[*] hideShape( int i, TYPE[*] in)                  \
{                                                      \
  return( _hideShape_SxA_( i, in));                    \
}
HIDESHAPE( int)
HIDESHAPE( char)
HIDESHAPE( float)
HIDESHAPE( double)
HIDESHAPE( bool)

/*
 * AKV -> AUD
 * AKS -> AUD
 * AKD -> AUD
 * AUD -> AUD
 * SCALAR -> AUD
 */
#define HIDEDIMENSIONALITY( TYPE)                      \
inline                                                 \
TYPE[*] hideDimensionality( TYPE[*] in)                \
{                                                      \
  return( _hideDim_SxA_( 0, in));                      \
}                                                      \
inline                                                 \
TYPE[*] hideDimensionality( int i, TYPE[*] in)         \
{                                                      \
  return( _hideDim_SxA_( i, in));                      \
}
HIDEDIMENSIONALITY( int)
HIDEDIMENSIONALITY( char)
HIDEDIMENSIONALITY( float)
HIDEDIMENSIONALITY( double)
HIDEDIMENSIONALITY( bool)
/** @} */
