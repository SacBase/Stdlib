/* C99 Benchmarking Module
 *
 * Measures time Intervals in an arbitrary time unit as doubles.
 *
 * Use getInterval to construct a benchmarking interval object and start and
 * end to measure each interval. Take care when start and stop are evaluated
 * since this will affect the windows that is measured. The function benchThis
 * simply affects the benchmarking object and can be used in inhibit code
 * movement. The function printResult dumps the measurement information in a
 * unibench friendly format.
 *
 * When benchmarking funtions the pragma "noinline" should be specified after
 * the function body to inhibit any inlining optimisations.
 *
 * start and end get the timestamps on the CPU for CPU backends, and on GPU for
 * GPU backends. This is ok even when benchmarking CPU code on GPU backends
 * because both start and end have the same delay of launching a kernel (few
 * microseconds).
 */
class C99Benchmarking;
external classtype;

#define NANO_TO_SEC(time) (tod(time) / 1000000000.0)
#define NANO_TO_MSEC(time) (tod(time) / 1000000.0)
#define NANO_TO_MCSEC(time) (tod(time) / 1000.0)

#define MICRO_TO_SEC(time) (tod(time) / 1000000.0)
#define MICRO_TO_MSEC(time) (tod(time) / 1000.0)
#define MICRO_TO_NSEC(time) (tod(time) * 1000.0)

#define MILLI_TO_SEC(time) (tod(time) / 1000.0)
#define MILLI_TO_MCSEC(time) (tod(time) * 1000.0)
#define MILLI_TO_NSEC(time) (tod(time) * 1000000.0)

#define SEC_TO_MSEC(time) (tod(time) * 1000.0)
#define SEC_TO_MCSEC(time) (tod(time) * 1000000.0)
#define SEC_TO_NSEC(time) (tod(time) * 1000000000.0)

#define SECONDS 0
#define MILLIS 1
#define MICROS 2
#define NANOS 3

import Interval: all;
use String: { string, sprintf };
use Array: all;
use StdIO: all;

export { Interval, start, end, benchThis, returnResultUnit, printResult,
         getInterval, destroyInterval};

objdef C99Benchmarking TheBenchmarkObject = create_TheBenchmarkObject( );

external C99Benchmarking create_TheBenchmarkObject( );
#pragma effect World::TheWorld
#pragma linkname "benchCreate"
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [1]

/*** time unit ***/
Interval getInterval( string interval_name, int interval_number, int unit_time) {
  return( _getInterval_u( interval_name, interval_number, unit_time));
}

external Interval _getInterval_u( string interval_name, int interval_number, int unit_time);
#pragma effect C99Benchmarking::TheBenchmarkObject
#pragma linkname "benchGetInterval_siu"
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1,2,3]
/*** !time unit ***/

Interval getInterval( string interval_name, int interval_number) {
  return( _getInterval( interval_name, interval_number));
}

external Interval _getInterval( string interval_name, int interval_number);
#pragma effect C99Benchmarking::TheBenchmarkObject
#pragma linkname "benchGetInterval_si"
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1,2]

Interval getInterval( string interval_name) {
    return(_getInterval( interval_name));
}

external Interval _getInterval( string interval_name);
#pragma effect C99Benchmarking::TheBenchmarkObject
#pragma linkname "benchGetInterval_s"
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1]

Interval getInterval( int interval_number) {
  return(_getInterval( interval_number));
 }

external Interval _getInterval( int interval_number);
#pragma effect C99Benchmarking::TheBenchmarkObject
#pragma linkname "benchGetInterval_i"
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1]

external string benchUnitType( Interval& interval);
#pragma effect C99Benchmarking::TheBenchmarkObject
#pragma linkname "benchUnitName"
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1]

double benchTime( int unit_time)
{
  secs, nsecs = MTClock::gettime();
  if(unit_time == MILLIS)
    time = SEC_TO_MSEC(secs) + NANO_TO_MSEC(nsecs);
  else if(unit_time == MICROS)
    time = SEC_TO_MCSEC(secs) + NANO_TO_MCSEC(nsecs);
  else if(unit_time == NANOS)
    time = SEC_TO_NSEC(secs) + tod(nsecs);
  else {
    time = tod(secs) + NANO_TO_SEC(nsecs);
  }
  return( time);
}

void start( Interval& interval)
{
  time = benchTime(benchUnit(interval));
  benchStart( interval, time);
}

void end( Interval& interval)
{
  time = benchTime(benchUnit(interval));
  benchEnd( interval, time);
}

external void benchStart( Interval& interval, double timestamp);
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif

external void benchEnd( Interval& interval, double timestamp);
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif

external int benchUnit( Interval& interval);
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1]

external double benchRes( Interval& interval);
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1]

external int benchNum( Interval& interval);
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1]

external string benchName( Interval& interval);
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linksign [0,1]

double, string returnResultUnit( Interval& int1)
{
   return( benchRes( int1), benchUnitType( int1));
}

void printResult( Interval& int1)
{
  names = StringArray::genarray( [1], StringArray::to_stringArray( ""));
  names = StringArray::modarray(
                names, [0],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int1)) String::+
                                " " String::+
                                benchName( int1) String::+
                                " " String::+
                                benchUnitType( int1)));
  printResults( names,
                [ benchRes( int1)]);
}

void printResult( Interval& int1, Interval& int2)
{
  names = StringArray::genarray( [2], StringArray::to_stringArray( ""));
  names = StringArray::modarray(
                names, [0],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int1)) String::+
                                " " String::+
                                benchName( int1) String::+
                                " " String::+
                                benchUnitType( int1)));
  names = StringArray::modarray(
                names, [1],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int2)) String::+
                                " " String::+
                                benchName( int2) String::+
                                " " String::+
                                benchUnitType( int2)));
  printResults( names,
                [ benchRes( int1), benchRes( int2)]);
}

void printResult( Interval& int1, Interval& int2, Interval& int3)
{
  names = StringArray::genarray( [3], StringArray::to_stringArray( ""));
  names = StringArray::modarray(
                names, [0],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int1)) String::+
                                " " String::+
                                benchName( int1) String::+
                                " " String::+
                                benchUnitType( int1)));
  names = StringArray::modarray(
                names, [1],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int2)) String::+
                                " " String::+
                                benchName( int2) String::+
                                " " String::+
                                benchUnitType( int2)));
  names = StringArray::modarray(
                names, [2],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int3)) String::+
                                " " String::+
                                benchName( int3) String::+
                                " " String::+
                                benchUnitType( int3)));
  printResults( names,
                [ benchRes( int1), benchRes( int2), benchRes( int3)]);
}

void printResult( Interval& int1, Interval& int2, Interval& int3,
                  Interval& int4)
{
  names = StringArray::genarray( [4], StringArray::to_stringArray( ""));
  names = StringArray::modarray(
                names, [0],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int1)) String::+
                                " " String::+
                                benchName( int1) String::+
                                " " String::+
                                benchUnitType( int1)));
  names = StringArray::modarray(
                names, [1],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int2)) String::+
                                " " String::+
                                benchName( int2) String::+
                                " " String::+
                                benchUnitType( int2)));
  names = StringArray::modarray(
                names, [2],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int3)) String::+
                                " " String::+
                                benchName( int3) String::+
                                " " String::+
                                benchUnitType( int3)));
  names = StringArray::modarray(
                names, [3],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int4)) String::+
                                " " String::+
                                benchName( int4) String::+
                                " " String::+
                                benchUnitType( int4)));
  printResults( names,
                [ benchRes( int1), benchRes( int2),
                  benchRes( int3), benchRes( int4)]);
}

void printResult( Interval& int1, Interval& int2, Interval& int3,
                  Interval& int4, Interval& int5)
{
  names = StringArray::genarray( [5], StringArray::to_stringArray( ""));
  names = StringArray::modarray(
                names, [0],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int1)) String::+
                                " " String::+
                                benchName( int1) String::+
                                " " String::+
                                benchUnitType( int1)));
  names = StringArray::modarray(
                names, [1],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int2)) String::+
                                " " String::+
                                benchName( int2) String::+
                                " " String::+
                                benchUnitType( int2)));
  names = StringArray::modarray(
                names, [2],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int3)) String::+
                                " " String::+
                                benchName( int3) String::+
                                " " String::+
                                benchUnitType( int3)));
  names = StringArray::modarray(
                names, [3],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int4)) String::+
                                " " String::+
                                benchName( int4) String::+
                                " " String::+
                                benchUnitType( int4)));
  names = StringArray::modarray(
                names, [4],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int5)) String::+
                                " " String::+
                                benchName( int5) String::+
                                " " String::+
                                benchUnitType( int5)));
  printResults( names,
                [ benchRes( int1), benchRes( int2),
                  benchRes( int3), benchRes( int4), benchRes( int5)]);
}

void printResult( Interval& int1, Interval& int2, Interval& int3,
                  Interval& int4, Interval& int5, Interval& int6)
{
  names = StringArray::genarray( [6], StringArray::to_stringArray( ""));
  names = StringArray::modarray(
                names, [0],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int1)) String::+
                                " " String::+
                                benchName( int1) String::+
                                " " String::+
                                benchUnitType( int1)));
  names = StringArray::modarray(
                names, [1],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int2)) String::+
                                " " String::+
                                benchName( int2) String::+
                                " " String::+
                                benchUnitType( int2)));
  names = StringArray::modarray(
                names, [2],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int3)) String::+
                                " " String::+
                                benchName( int3) String::+
                                " " String::+
                                benchUnitType( int3)));
  names = StringArray::modarray(
                names, [3],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int4)) String::+
                                " " String::+
                                benchName( int4) String::+
                                " " String::+
                                benchUnitType( int4)));
  names = StringArray::modarray(
                names, [4],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int5)) String::+
                                " " String::+
                                benchName( int5) String::+
                                " " String::+
                                benchUnitType( int5)));
  names = StringArray::modarray(
                names, [5],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int6)) String::+
                                " " String::+
                                benchName( int6) String::+
                                " " String::+
                                benchUnitType( int6)));
  printResults( names,
                [ benchRes( int1), benchRes( int2),
                  benchRes( int3), benchRes( int4), benchRes( int5),
                  benchRes( int6)]);
}

void printResult( Interval& int1, Interval& int2, Interval& int3,
                  Interval& int4, Interval& int5, Interval& int6,
                  Interval& int7)
{
  names = StringArray::genarray( [7], StringArray::to_stringArray( ""));
  names = StringArray::modarray(
                names, [0],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int1)) String::+
                                " " String::+
                                benchName( int1) String::+
                                " " String::+
                                benchUnitType( int1)));
  names = StringArray::modarray(
                names, [1],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int2)) String::+
                                " " String::+
                                benchName( int2) String::+
                                " " String::+
                                benchUnitType( int2)));
  names = StringArray::modarray(
                names, [2],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int3)) String::+
                                " " String::+
                                benchName( int3) String::+
                                " " String::+
                                benchUnitType( int3)));
  names = StringArray::modarray(
                names, [3],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int4)) String::+
                                " " String::+
                                benchName( int4) String::+
                                " " String::+
                                benchUnitType( int4)));
  names = StringArray::modarray(
                names, [4],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int5)) String::+
                                " " String::+
                                benchName( int5) String::+
                                " " String::+
                                benchUnitType( int5)));
  names = StringArray::modarray(
                names, [5],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int6)) String::+
                                " " String::+
                                benchName( int6) String::+
                                " " String::+
                                benchUnitType( int6)));
  names = StringArray::modarray(
                names, [6],
                StringArray::to_stringArray( sprintf( "%d", benchNum( int7)) String::+
                                " " String::+
                                benchName( int7) String::+
                                " " String::+
                                benchUnitType( int7)));
  printResults( names,
                [ benchRes( int1), benchRes( int2),
                  benchRes( int3), benchRes( int4), benchRes( int5),
                  benchRes( int6), benchRes( int7)]);
}

void printResults( StringArray::stringArray names, double[.] results)
{
  printf( "### begin intervals\n");
  FibrePrint( results);
  printf( "### begin intervals\n");
  printf( "### begin descriptions\n");
  FibrePrint( names);
  printf( "### end descriptions\n");
}

/*
 * This function simply affects TheBenchmarkObject and nothing else.
 * Use it to inhibit code movement. The most common use for benchThis
 * is to call it within a function body of a function body that should be
 * evaluated after a call to start and before a call to end.
 */
external void benchThis();
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif

void destroyInterval( Interval interval)
{
  benchDestroyInterval( interval);
}

external void benchDestroyInterval( Interval interval);
#pragma effect C99Benchmarking::TheBenchmarkObject
#ifdef SAC_BACKEND_CUDA
  #pragma linkobj "src/CudaBenchmarking/bench.o"
#else
  #pragma linkobj "src/C99Benchmarking/bench.o"
#endif
#pragma linkname "benchDestroyInterval"
#pragma linksign [1]
