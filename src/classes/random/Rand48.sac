/**
 * @file
 * @defgroup rand48 Rand48
 *
 * Class Rand48 provides a pseudo-random number generator which uses the
 * linear congruential algorithm and 48-bit integer arithmetic.
 *
 * @{
 */
class Rand48;

external classtype;

export all;

objdef Rand48 RandomGen = randGen();

external Rand48 randGen();
    #pragma linksign [0]
    #pragma linkname "create_Rand48Gen"
    #pragma linkobj  "src/Rand48/Rand48.o"


/**
 * @brief Initialize RandomGen to produce a new sequence of pseudo-random
 *        numbers.
 * @param SEED value for seed
 */
external void srandom(long SEED);
    #pragma effect Rand48::RandomGen
    #pragma linkname "srand48"
    #pragma linkobj  "src/Rand48/Rand48.o"

/**
 * @brief Use RandomGen to generate a new pseudo-random integer in the range
 *        MIN to MAX.
 *
 * @param MIN lowest point on range
 * @param MAX highest point on range
 * @return pseudo-random value
 */
external int random(int MIN, int MAX);
    #pragma linksign [0,1,2]
    #pragma effect Rand48::RandomGen
    #pragma linkname "SACrand48"
    #pragma linkobj  "src/Rand48/Rand48.o"

/**
 * brief Use RandomGen to generate a new pseudo-random double precision
 *       floating-point number in the interval [MIN, MAX).
 *
 * @param MIN lowest point on range
 * @param MAX highest point on range
 * @return pseudo-random value
 */
external double random(double MIN, double MAX);
    #pragma linksign [0,1,2]
    #pragma effect Rand48::RandomGen
    #pragma linkname "SACdrand48"
    #pragma linkobj  "src/Rand48/Rand48.o"



int[*] random( int[.] shp, int MIN, int MAX)
{
  res = with {
          ( . <= iv <= . ) : random( MIN, MAX );
        } : genarray( shp, 0 );
  return( res);
}

double[*] random( int[.] shp, double MIN, double MAX)
{
  res = with {
          ( . <= iv <= . ) : random( MIN, MAX );
        } : genarray( shp, 0d );
  return( res);
}
/** @} */
