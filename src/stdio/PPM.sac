module PPM;

use Color8: { color };
use File: { File, fopen, fclose };
use ScalarArith: { == };
use String: { string };
use TermFile: { TermFile, stdin, stdout };

export { readPPM, printPPM };

external color[.,.] readStream(TermFile &stream);
    #pragma effect Terminal::TheTerminal
    #pragma linkobj "src/PPM/ppm2array.o"
    #pragma linkname "SAC_PPM_ppm2array"
    #pragma refcounting [0]
    #pragma linksign [1,2]

external color[.,.] readStream(File &stream);
    #pragma effect FileSystem::TheFileSystem
    #pragma linkobj "src/PPM/ppm2array.o"
    #pragma linkname "SAC_PPM_ppm2array"
    #pragma refcounting [0]
    #pragma linksign [1,2]

external void writeStream(TermFile &stream , color[.,.] image,
                          int[2] shp, bool binary);
    #pragma effect Terminal::TheTerminal
    #pragma linkobj "src/PPM/array2ppm.o"
    #pragma linkname "SAC_PPM_array2ppm"

external void writeStream(File &stream , color[.,.] image,
                          int[2] shp, bool binary);
    #pragma effect FileSystem::TheFileSystem
    #pragma linkobj "src/PPM/array2ppm.o"
    #pragma linkname "SAC_PPM_array2ppm"

inline color[.,.] readPPM()
{
    return readStream(stdin);
}

inline color[.,.] readPPM(string name)
{
    err, fp = fopen(name, "r");

    if (SysErr::fail(err) == true) {
        RuntimeError::error((int)err,
            "Error occured when trying to open file %s for reading",
            name);
    }

    ret = readStream(fp);
    fclose(fp);
    return(ret);
}

inline void printPPM(color[2:shp] img)
{
    writeStream(stdout, img, shp, false);
}

inline void printPPM(color[2:shp] img, string name, bool binary)
{
    err, fp = fopen(name, "w+");

    if (SysErr::fail(err) == true) {
        RuntimeError::error((int)err,
            "Error occured when trying to open file %s for writing",
            name);
    }

    writeStream(fp, img, shp, binary);
    fclose(fp);
}
