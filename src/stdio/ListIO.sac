module ListIO;

use IOresources: all;
use List: all;
use ScalarIO : { scanint };
use ScalarArith : all;
use TermFile : { TermFile };

export all;

#ifdef BUG197FIXED

list fscanlist( File &stream)
{
  l = nil();
  success = true;

  while ((! feof( stream)) && success) {
    success, elem = fscanint( stream);
    if (success) {
      l = append( cons( elem, nil()), l);
    }
  }

  return( l);
}


/*****************************************************************/


list fscanlist( File &stream, int length)
{
  l = nil();
  success = true;
  cnt = 0;

  while ((! feof( stream)) && success && (cnt < length)) {
    success, elem = fscanint( stream);

    if (success) {
      l = append( cons( elem, nil()), l);
    }
  }

  return(l);
}


/*****************************************************************/
/*****************************************************************/


list fscanlist( TermFile &stream)
{
  l = nil();
  success = true;

  while ((! feof( stream)) && success) {
    success, elem = fscanint( stream);
    if (success) {
      l = append( cons( elem, nil()), l);
    }
  }

  return( l);
}


/*****************************************************************/


list fscanlist( TermFile &stream, int length)
{
  l = nil();
  success = true;
  cnt = 0;

  while ((! feof( stream)) && success && (cnt < length)) {
    success, elem = fscanint( stream);

    if (success) {
      l = append( cons( elem, nil()), l);
    }
  }

  return(l);
}


/*****************************************************************/
/*****************************************************************/


list scanlist()
{
  l = nil();
  success = true;

  while (success) {
    success, elem = scanint();
    if (success) {
      l = append( cons( elem, nil()), l);
    }
  }

  return( l);
}


/*****************************************************************/


list scanlist( int length)
{
  l = nil();
  success = true;
  cnt = 0;

  while (success && (cnt < length)) {
    success, elem = scanint();

    if (success) {
      l = append( cons( elem, nil()), l);
    }
  }

  return(l);
}

#endif /* BUG197FIXED */

/*****************************************************************/
/*****************************************************************/


void fprint( File &stream, list L)
{
  File::fprintf( stream, "(");
  if (! empty( L)) {
    File::fprintf( stream, " %d ", hd( L));
    L = tl( L);
    while (! empty( L)) {
      File::fprintf( stream, ": %d ", hd( L));
      L = tl( L);
    }
  }
  File::fprintf( stream, ")\n");
}


/*****************************************************************/


void fprint( File &stream, list L, int ElemsPerLine)
{
  File::fprintf( stream, "(");
  if (! empty( L)) {
    File::fprintf( stream, " %d ", hd( L));
    L = tl( L);
    cnt = 1;
    while ((! empty( L)) && (cnt < ElemsPerLine)) {
      File::fprintf( stream, ": %d ", hd( L));
      L = tl( L);
      cnt = _add_SxS_(cnt, 1);
    }
    while (! empty( L)) {
      File::fprintf( stream, "\n");
      cnt = 0;
      while ((! empty( L)) && (cnt < ElemsPerLine)) {
        File::fprintf( stream, ": %d ", hd( L));
        L = tl( L);
        cnt = _add_SxS_(cnt, 1);
      }
    }
  }
  File::fprintf( stream, ")\n");
}


/*****************************************************************/


void fprint( File &stream, list L, int ElemsPerLine, int ColWidth)
{
  File::fprintf( stream, "(");
  if (! empty( L)) {
    File::fprintf( stream, " %*d ", ColWidth, hd( L));
    L = tl( L);
    cnt = 1;
    while ((! empty( L)) && (cnt < ElemsPerLine)) {
      File::fprintf( stream, ": %*d ", ColWidth, hd( L));
      L = tl( L);
      cnt = _add_SxS_(cnt, 1);
    }
    while (! empty( L)) {
      File::fprintf( stream, "\n");
      cnt = 0;
      while ((! empty( L)) && (cnt < ElemsPerLine)) {
        File::fprintf( stream, ": %*d ", ColWidth, hd( L));
        L = tl( L);
        cnt = _add_SxS_(cnt, 1);
      }
    }
  }
  File::fprintf( stream, ")\n");
}


/*****************************************************************/
/*****************************************************************/


void fprint( TermFile &stream, list L)
{
  TermFile::fprintf( stream, "(");
  if (! empty( L)) {
    TermFile::fprintf( stream, " %d ", hd( L));
    L = tl( L);
    while (! empty( L)) {
      TermFile::fprintf( stream, ": %d ", hd( L));
      L = tl( L);
    }
  }
  TermFile::fprintf( stream, ")\n");
}


/*****************************************************************/


void fprint( TermFile &stream, list L, int ElemsPerLine)
{
  TermFile::fprintf( stream, "(");
  if (! empty( L)) {
    TermFile::fprintf( stream, " %d ", hd( L));
    L = tl( L);
    cnt = 1;
    while ((! empty( L)) && (cnt < ElemsPerLine)) {
      TermFile::fprintf( stream, ": %d ", hd( L));
      L = tl( L);
      cnt = _add_SxS_(cnt, 1);
    }
    while (! empty( L)) {
      TermFile::fprintf( stream, "\n");
      cnt = 0;
      while ((! empty( L)) && (cnt < ElemsPerLine)) {
        TermFile::fprintf( stream, ": %d ", hd( L));
        L = tl( L);
        cnt = _add_SxS_(cnt, 1);
      }
    }
  }
  TermFile::fprintf( stream, ")\n");
}


/*****************************************************************/


void fprint( TermFile &stream, list L, int ElemsPerLine, int ColWidth)
{
  TermFile::fprintf( stream, "(");
  if (! empty( L)) {
    TermFile::fprintf( stream, " %*d ", ColWidth, hd( L));
    L = tl( L);
    cnt = 1;
    while ((! empty( L)) && (cnt < ElemsPerLine)) {
      TermFile::fprintf( stream, ": %*d ", ColWidth, hd( L));
      L = tl( L);
      cnt = _add_SxS_(cnt, 1);
    }
    while (! empty( L)) {
      TermFile::fprintf( stream, "\n");
      cnt = 0;
      while ((! empty( L)) && (cnt < ElemsPerLine)) {
        TermFile::fprintf( stream, ": %*d ", ColWidth, hd( L));
        L = tl( L);
        cnt = _add_SxS_(cnt, 1);
      }
    }
  }
  TermFile::fprintf( stream, ")\n");
}


/*****************************************************************/
/*****************************************************************/


void print( list L)
{
  TermFile::printf( "(");
  if (! empty( L)) {
    TermFile::printf( " %d ", hd( L));
    L = tl( L);
    while (! empty( L)) {
      TermFile::printf( ": %d ", hd( L));
      L = tl( L);
    }
  }
  TermFile::printf( ")\n");
}


/*****************************************************************/


void print( list L, int ElemsPerLine)
{
  TermFile::printf( "(");
  if (! empty( L)) {
    TermFile::printf( " %d ", hd( L));
    L = tl( L);
    cnt = 1;
    while ((! empty( L)) && (cnt < ElemsPerLine)) {
      TermFile::printf( ": %d ", hd( L));
      L = tl( L);
      cnt = _add_SxS_(cnt, 1);
    }
    while (! empty( L)) {
      TermFile::printf( "\n");
      cnt = 0;
      while ((! empty( L)) && (cnt < ElemsPerLine)) {
        TermFile::printf( ": %d ", hd( L));
        L = tl( L);
        cnt = _add_SxS_(cnt, 1);
      }
    }
  }
  TermFile::printf( ")\n");
}


/*****************************************************************/


void print( list L, int ElemsPerLine, int ColWidth)
{
  TermFile::printf( "(");
  if (! empty( L)) {
    TermFile::printf( " %*d ", ColWidth, hd( L));
    L = tl( L);
    cnt = 1;
    while ((! empty( L)) && (cnt < ElemsPerLine)) {
      TermFile::printf( ": %*d ", ColWidth, hd( L));
      L = tl( L);
      cnt = _add_SxS_(cnt, 1);
    }
    while (! empty( L)) {
      TermFile::printf( "\n");
      cnt = 0;
      while ((! empty( L)) && (cnt < ElemsPerLine)) {
        TermFile::printf( ": %*d ", ColWidth, hd( L));
        L = tl( L);
        cnt = _add_SxS_(cnt, 1);
      }
    }
  }
  TermFile::printf( ")\n");
}
