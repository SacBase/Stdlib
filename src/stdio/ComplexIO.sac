/**
 * @file
 * @defgroup complexio ComplexIO
 *
 * @{
 */
module ComplexIO;

/*****************************************************************/


use IOresources: all;
use String: { string, to_string, sprintf};
use Complex: { complex, imag, real, toc, shape, dim};
use ScalarArith : { == };
use TermFile : {TermFile};

export {print, fprint};

/*
 *  prototypes for externals (FUNDECS)
 */

external void printarray( File &stream, int d, int[.] s, complex[*] a)
/*
 *  printarray ::  ---
 */;
#pragma linkname "COMPLEXIO__PrintComplexArray"
#pragma linkobj "src/ComplexIO/PrintComplexArray.o"

external void  printarray( TermFile &stream, int d, int[.] s, complex[*] a)
/*
 *  printarray ::  ---
 */;
#pragma linkname "COMPLEXIO__PrintComplexArray"
#pragma linkobj "src/ComplexIO/PrintComplexArray.o"

external void printarray( File &stream, string format, int d, int[.] s, complex[*] a)
/*
 *  printarray ::  ---
 */;
#pragma linkname "COMPLEXIO__PrintComplexArrayFormat"
#pragma linkobj "src/ComplexIO/PrintComplexArray.o"

external void  printarray( TermFile &stream, string format, int d, int[.] s, complex[*] a)
/*
 *  printarray ::  ---
 */;
#pragma linkname "COMPLEXIO__PrintComplexArrayFormat"
#pragma linkobj "src/ComplexIO/PrintComplexArray.o"


/*****************************************************************/

inline void fprint(File &stream, complex c)
{
  File::fprintf(stream, "(%g,%g)", real(c), imag(c));
}


/*****************************************************************/

inline void fprint(File &stream, complex c, int mode)
{
  if (mode==2)
  {
    File::fprintf(stream, "%g %g", real(c), imag(c));
  }
  else
  {
    if (mode==1)
    {
      File::fprintf(stream, "%g+%gi", real(c), imag(c));
    }
    else
    {
      File::fprintf(stream, "(%g, %g)", real(c), imag(c));
    }
  }
}


/*****************************************************************/

inline void fprint(File &stream, complex c, int mode, int prec)
{
  if (mode==2)
  {
    File::fprintf(stream, "%.*g %.*g", prec, real(c), prec, imag(c));
  }
  else
  {
    if (mode==1)
    {
      File::fprintf(stream, "%.*g+%.*gi", prec, real(c), prec, imag(c));
    }
    else
    {
      File::fprintf(stream, "(%.*g, %.*g)", prec, real(c), prec, imag(c));
    }
  }
}


/*****************************************************************/
/*****************************************************************/


inline void fprint(TermFile &stream, complex c)
{
  TermFile::fprintf(stream, "(%g,%g)", real(c), imag(c));
}


/*****************************************************************/

inline void fprint(TermFile &stream, complex c, int mode)
{
  if (mode==2)
  {
    TermFile::fprintf(stream, "%g %g", real(c), imag(c));
  }
  else
  {
    if (mode==1)
    {
      TermFile::fprintf(stream, "%g+%gi", real(c), imag(c));
    }
    else
    {
      TermFile::fprintf(stream, "(%g, %g)", real(c), imag(c));
    }
  }
}


/*****************************************************************/

inline void fprint(TermFile &stream, complex c, int mode, int prec)
{
  if (mode==2)
  {
    TermFile::fprintf(stream, "%.*g %.*g", prec, real(c), prec, imag(c));
  }
  else
  {
    if (mode==1)
    {
      TermFile::fprintf(stream, "%.*g+%.*gi", prec, real(c), prec, imag(c));
    }
    else
    {
      TermFile::fprintf(stream, "(%.*g, %.*g)", prec, real(c), prec, imag(c));
    }
  }
}


/*****************************************************************/
/*****************************************************************/

inline void print(complex c)
{
  fprint(TermFile::stdout, c);
}


/*****************************************************************/

inline void print(complex c, int mode)
{
  fprint(TermFile::stdout, c, mode);
}


/*****************************************************************/

inline void print(complex c, int mode, int prec)
{
  fprint(TermFile::stdout, c, mode, prec);
}

/*****************************************************************/

inline void print(complex[+] arr)
{
  printarray(TermFile::stdout, dim( arr), shape( arr), arr);
}

/*****************************************************************/

inline void print(complex[+] arr, int mode)
{
  string format;
  if (mode==2)
  {
    format = "%g %g ";
  }
  else
  {
    if (mode==1)
    {
      format = "%g+%gi ";
    }
    else
    {
      format = "(%g, %g) ";
    }
  }
  printarray(TermFile::stdout, format, dim( arr), shape( arr), arr);
}

/*****************************************************************/

inline void print(complex[+] arr, int mode, int prec)
{
  string format;
  if (mode==2)
  {
    format = sprintf("%%.%dg %%.%dg ", prec, prec);
  }
  else
  {
    if (mode==1)
    {
      format = sprintf("%%.%dg+%%.%dgi ", prec, prec);
    }
    else
    {
      format = sprintf("(%%.%dg, %%.%dg) ", prec, prec);
    }
  }
  printarray(TermFile::stdout, format, dim( arr), shape( arr), arr);
}

/*****************************************************************/
/*****************************************************************/

inline bool, complex fscancomplex(File &stream)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  success, re, im=File::fscanf(stream, "(%lf,%lf)");
  
  return(success==2, toc(re, im));
}


/*****************************************************************/


inline bool, complex fscancomplex(File &stream, int mode)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  if (mode==2)
  {
    success, re, im=File::fscanf(stream, "%lf %lf");
  }
  else
  {
    if (mode==1)
    {
      success, re, im=File::fscanf(stream, "%lf+%lfi");
    }
    else
    {
      success, re, im=File::fscanf(stream, "(%lf,%lf)");
    }
  }

  
  return(success==2, toc(re, im));
}


/*****************************************************************/
/*****************************************************************/


inline bool, complex fscancomplex(TermFile &stream)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  success, re, im=TermFile::fscanf(stream, "(%lf,%lf)");
  
  return(success==2, toc(re, im));
}


/*****************************************************************/


inline bool, complex fscancomplex(TermFile &stream, int mode)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  if (mode==2)
  {
    success, re, im=TermFile::fscanf(stream, "%lf %lf");
  }
  else
  {
    if (mode==1)
    {
      success, re, im=TermFile::fscanf(stream, "%lf+%lfi");
    }
    else
    {
      success, re, im=TermFile::fscanf(stream, "(%lf,%lf)");
    }
  }

  
  return(success==2, toc(re, im));
}


/*****************************************************************/
/*****************************************************************/


inline bool, complex scancomplex()
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  success, re, im=TermFile::scanf("(%lf,%lf)");
  
  return(success==2, toc(re, im));
}


/*****************************************************************/


inline bool, complex scancomplex(int mode)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  if (mode==2)
  {
    success, re, im=TermFile::scanf("%lf %lf");
  }
  else
  {
    if (mode==1)
    {
      success, re, im=TermFile::scanf("%lf+%lfi");
    }
    else
    {
      success, re, im=TermFile::scanf("(%lf,%lf)");
    }
  }

  
  return(success==2, toc(re, im));
}

/*****************************************************************/
/*****************************************************************/

/** @} */
