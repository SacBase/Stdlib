/**
 * @file
 * @defgroup arrayio ArrayIO
 *
 * @{
 */
module ArrayIO;


use IOresources: all;
/*use ArrayBasics : all;*/
use ArrayFormat: all;
use Structures: all;
use TermFile: {TermFile};

export { print, fprint, show};

#include "Templates.mac"

#define HASH #
#define PRINTME(x) x
#define QUOTEME(x) #x

#ifdef SAC_BACKEND_DISTMEM

#define LINKSPECS(actualtype, typename)                                       \
external void printarray(File &stream, int d, int[.] s, actualtype[*] a,      \
                         bool is_distr, ulong arr_offset,                     \
                         ulong elems_first_nodes);                            \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##Array)       \
  PRINTME(HASH)pragma linkobj QUOTEME(src/ArrayIO/PrintArray.o)               \
external void printarray(TermFile &stream, int d, int[.] s, actualtype[*] a,  \
                         bool is_distr, ulong arr_offset,                     \
                         ulong elems_first_nodes);                            \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##Array)       \
  PRINTME(HASH)pragma linkobj QUOTEME(src/ArrayIO/PrintArray.o)               \
external void printarray(File &stream, string fmt,                            \
                         int d, int[.] s, actualtype[*] a,                    \
                         bool is_distr, ulong arr_offset,                     \
                         ulong elems_first_nodes);                            \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##ArrayFormat) \
  PRINTME(HASH)pragma linkobj QUOTEME(src/ArrayIO/PrintArray.o)               \
external void printarray(TermFile &stream, string fmt, int d,                 \
                         int[.] s, actualtype[*] a,                           \
                         bool is_distr, ulong arr_offset,                     \
                         ulong elems_first_nodes);                            \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##ArrayFormat) \
  PRINTME(HASH)pragma linkobj QUOTEME(src/ArrayIO/PrintArray.o)               

#else /* defined(SAC_BACKEND_DISTMEM) */

#define LINKSPECS(actualtype, typename)                                       \
external void printarray(File &stream, int d, int[.] s, actualtype[*] a);     \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##Array)       \
  PRINTME(HASH)pragma linkobj "src/ArrayIO/PrintArray.o"               \
external void printarray(TermFile &stream, int d, int[.] s, actualtype[*] a); \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##Array)       \
  PRINTME(HASH)pragma linkobj "src/ArrayIO/PrintArray.o"               \
external void printarray(File &stream, string fmt,                            \
                         int d, int[.] s, actualtype[*] a);                   \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##ArrayFormat) \
  PRINTME(HASH)pragma linkobj "src/ArrayIO/PrintArray.o"               \
external void printarray(TermFile &stream, string fmt, int d,                 \
                         int[.] s, actualtype[*] a);                          \
  PRINTME(HASH)pragma linkname QUOTEME(ARRAYIO__Print##typename##ArrayFormat) \
  PRINTME(HASH)pragma linkobj "src/ArrayIO/PrintArray.o"

#endif /* defined(SAC_BACKEND_DISTMEM) */

LINKSPECS (bool, Bool)
LINKSPECS (byte, Byte)
LINKSPECS (short, Short)
LINKSPECS (int, Int)
LINKSPECS (long, Long)
LINKSPECS (longlong, Longlong)
LINKSPECS (ubyte, Ubyte)
LINKSPECS (ushort, Ushort)
LINKSPECS (uint, Uint)
LINKSPECS (ulong, Ulong)
LINKSPECS (ulonglong, Ulonglong)
LINKSPECS (float, Float)
LINKSPECS (double, Double)
LINKSPECS (char, Char)

external void showarray(File &stream, int d, int[.] s, char[*] a);
    #pragma linkname "ARRAYIO__ShowCharArray"
    #pragma linkobj "src/ArrayIO/ShowArray.o"

external void showarray(TermFile &stream, int d, int[.] s, char[*] a);
    #pragma linkname "ARRAYIO__ShowCharArray"
    #pragma linkobj "src/ArrayIO/ShowArray.o"


#ifdef SAC_BACKEND_DISTMEM

#define PRINT( type, postfix, zero, one)                                \
inline void fprint(File &stream, typ[+] arr)                            \
{                                                                       \
  printarray(stream, dim(arr), shape(arr), arr,                         \
             _isDist_A_(arr), _offs_A_(arr), _firstElems_A_(arr));      \
}                                                                       \
                                                                        \
inline void fprint(TermFile &stream, typ[+] arr)                        \
{                                                                       \
  printarray(stream, dim(arr), shape(arr), arr,                         \
             _isDist_A_(arr), _offs_A_(arr), _firstElems_A_(arr));      \
}                                                                       \
                                                                        \
inline void print(typ[+] arr)                                           \
{                                                                       \
  printarray(stdout, dim(arr), shape(arr), arr,                         \
             _isDist_A_(arr), _offs_A_(arr), _firstElems_A_(arr));      \
}                                                                       \
                                                                        \
                                                                        \
                                                                        \
inline void fprint(File &stream, string fmt, typ[+] arr)                \
{                                                                       \
  printarray(stream, fmt, dim(arr), shape(arr), arr,                    \
             _isDist_A_(arr), _offs_A_(arr), _firstElems_A_(arr));      \
}                                                                       \
                                                                        \
inline void fprint(TermFile &stream, string fmt, typ[+] arr)            \
{                                                                       \
  printarray(stream, fmt, dim(arr), shape(arr), arr,                    \
             _isDist_A_(arr), _offs_A_(arr), _firstElems_A_(arr));      \
}                                                                       \
                                                                        \
inline void print(string fmt, typ[+] arr)                               \
{                                                                       \
  printarray(stdout, fmt, dim(arr), shape(arr), arr,                    \
             _isDist_A_(arr), _offs_A_(arr), _firstElems_A_(arr));      \
}                                                                       \


#else /* defined(SAC_BACKEND_DISTMEM) */


#define PRINT( typ, postfix, zero, one)                                \
inline void fprint(File &stream, typ[+] arr)                            \
{                                                                       \
  printarray(stream, dim(arr), shape(arr), arr);                        \
}                                                                       \
                                                                        \
inline void fprint(TermFile &stream, typ[+] arr)                        \
{                                                                       \
  printarray(stream, dim(arr), shape(arr), arr);                        \
}                                                                       \
                                                                        \
inline void print(typ[+] arr)                                           \
{                                                                       \
  printarray(stdout, dim(arr), shape(arr), arr);                        \
}                                                                       \
                                                                        \
                                                                        \
                                                                        \
inline void fprint(File &stream, string fmt, typ[+] arr)                \
{                                                                       \
  printarray(stream, fmt, dim(arr), shape(arr), arr);                   \
}                                                                       \
                                                                        \
inline void fprint(TermFile &stream, string fmt, typ[+] arr)            \
{                                                                       \
  printarray(stream, fmt, dim(arr), shape(arr), arr);                   \
}                                                                       \
                                                                        \
inline void print(string fmt, typ[+] arr)                               \
{                                                                       \
  printarray(stdout, fmt, dim(arr), shape(arr), arr);                   \
}                                                                       \

#endif /* defined(SAC_BACKEND_DISTMEM) */

#define SHOW(actualtype)                                                \
inline void show(actualtype[+] arr)                                     \
{                                                                       \
  carr=format( arr);                                                    \
  showarray(stdout, dim(carr), shape(carr), carr);                      \
}


BUILT_IN( PRINT)
/*BUILT_IN( SHOW)*/

SHOW( int)
SHOW( float)
SHOW( double)
SHOW( bool)
SHOW( char)

/** @} */
