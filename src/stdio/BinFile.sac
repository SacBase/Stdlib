class BinFile;

external classtype;

use World: { TheWorld };
use FileSystem: { TheFileSystem };
use String: {string};
use SysErr: {syserr};

export all;

  /*
   *  Functions to open and close files.
   */


external  syserr, BinFile binfopen(string NAME, int FLAGS);
    #pragma linkobj "src/BinFile/binfopen.o"
    #pragma effect TheFileSystem
    #pragma linkname "SACbinfopen"
    #pragma linksign [0,1,2,3]
    /*
     * Open the file NAME with flags FLAGS. The flags are set in the
     * same way as for the C version of this function. The permissions
     * of a newly created file will be set to 00600 & ~umask. An error
     * condition and a file handle are returned. You should inspect
     * the error condition before using the file handle.
     */



external syserr binfclose(BinFile BINSTREAM);
    #pragma linkobj "src/BinFile/binfclose.o"
    #pragma effect TheFileSystem
    #pragma linkname "SACbinfclose"
    #pragma linksign [0,1]
    /*
     * Close the binary file given by the file handle BINSTREAM. An error
     * condition is returned. You should inspect the error condition.
     */




  /*
   * Functions that act as wrappers for the most important 
   * C flags for file IO. 
   */

external int O_RDONLY();
    #pragma linkobj "src/BinFile/binfflags.o"
    #pragma linkname "SACbinf_O_RDONLY"
    #pragma linksign [0]
    /*
     * Returns the C constant O_RDONLY, which is used to open files with
     * read only access.
     */

external int O_WRONLY();
    #pragma linkobj "src/BinFile/binfflags.o"
    #pragma linkname "SACbinf_O_WRONLY"
    #pragma linksign [0]
    /*
     * Returns the C constant O_WRONLY, which is used to open files with
     * write only access.
     */

external int O_RDWR();
    #pragma linkobj "src/BinFile/binfflags.o"
    #pragma linkname "SACbinf_O_RDWR"
    #pragma linksign [0]
    /*
     * Returns the C constant O_RDWR, which is used to open files with
     * read and write access.
     */

external int O_CREAT();
    #pragma linkobj "src/BinFile/binfflags.o"
    #pragma linkname "SACbinf_O_CREAT"
    #pragma linksign [0]
    /*
     * Returns the C constant O_CREAT, meaning that a file with the
     * designated name will be created on opening if it does not
     * yet exist.
     */

external int O_TRUNC();
    #pragma linkobj "src/BinFile/binfflags.o"
    #pragma linkname "SACbinf_O_TRUNC"
    #pragma linksign [0]
    /*
     * Returns the C constant O_TRUNC. If a file already exists and the
     * open mode allows writing it will be truncated to length 0.
     */


  /*
   *  Functions to read from and write to files.
   */


external double[d:SHAPE] 
binfReadDoubleArray(BinFile &binstream, int DIM, int[d] SHAPE);
    #pragma refcounting [0]
    #pragma linkname "SACbinfReadDoubleArray"
    #pragma linksign[1,2,3,4]
    #pragma linkobj "src/BinFile/binfReadDblArr.o"
    /*
     * Reads an array of dimension DIM and shape SHAPE of doubles from
     * file binstream. Caution: This function does not check whether
     * it reads across the eof position. 
     */

external void 
binfWriteDoubleArray(BinFile &binstream, int DIM, int[DIM] SHAPE, 
                     double[DIM:SHAPE] ARRAY);
    #pragma linkname "SACbinfWriteDoubleArray"
    #pragma linkobj "src/BinFile/binfWriteDblArr.o"
    /*
     * Writes the array ARRAY of dimension DIM and shape SHAPE to file
     * binstream. 
     */

