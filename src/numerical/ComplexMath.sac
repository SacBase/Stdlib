#pragma safe;
module ComplexMath;

export all;

use ComplexBasics: all;
use ComplexScalarArith: all;

use ArrayBasics : { sel };



/*
 *  The following function definitions are based on
 *
 *  Bronstein/Semendjajew: Taschenbuch der Mathematik, page 512ff
 */



  /*  Trigonometric functions on complex numbers.  */


inline complex sin(complex X)
{
  return((complex)[Math::sin(((double[2])X)[[0]]) ScalarArith::* Math::cosh(((double[2])X)[[1]]),
                   Math::cos(((double[2])X)[[0]]) ScalarArith::* Math::sinh(((double[2])X)[[1]])]);
}


inline complex cos(complex X)
{
  return((complex)[Math::cos(((double[2])X)[[0]]) ScalarArith::* Math::cosh(((double[2])X)[[1]]),
                   (0d ScalarArith::- 1.0d) ScalarArith::* Math::sin(((double[2])X)[[0]])
                         ScalarArith::* Math::sinh(((double[2])X)[[1]])]);
}


inline complex tan(complex X)
{
  Z = Math::cos(2.0d ScalarArith::*((double[2])X)[[0]]) ScalarArith::+ Math::cosh(2.0d ScalarArith::* ((double[2])X)[[1]]);

  return((complex)[Math::sin(2d ScalarArith::*((double[2])X)[[0]])  ScalarArith::/ Z,
                   Math::sinh(2d ScalarArith::*((double[2])X)[[1]])  ScalarArith::/ Z]);
}


inline complex asin(complex X)
{
  return(toc(ScalarArith::-(1d)) * i() * log(i() * X + sqrt(toc(1,0) - X * X)));
}


inline complex acos(complex X)
{
  return(toc(ScalarArith::-(1d)) * i() * log(X + sqrt(X * X - toc(1,0))));
}


inline complex atan(complex X)
{
  return((toc(1.0d) / (toc(2.0d) * i())) * log((toc(1,0) + i() * X) / (toc(1,0) - i() * X)));
}



  /* Hyperbolic functions on complex numbers.  */


inline complex sinh(complex X)
{
  return((complex)[Math::sinh(((double[2])X)[[0]]) ScalarArith::* Math::cos(((double[2])X)[[1]]),
                   Math::cosh(((double[2])X)[[0]]) ScalarArith::* Math::sin(((double[2])X)[[1]])]);
}


inline complex cosh(complex X)
{
  return((complex)[Math::cosh(((double[2])X)[[0]]) ScalarArith::* Math::cos(((double[2])X)[[1]]),
                   Math::sinh(((double[2])X)[[0]]) ScalarArith::* Math::sin(((double[2])X)[[1]])]);
}


inline complex tanh(complex X)
{
  return(sinh(X) / cosh(X));
}


inline complex asinh(complex X)
{
  return( log(X + sqrt(X * X + toc(1,0))));
}


inline complex acosh(complex X)
{
  return(log(X + sqrt(X * X - toc(1,0))));
}


inline complex atanh(complex X)
{
  return(toc(0.5d) * log((toc(1,0) + X) / (toc(1,0) - X)));
}





  /* Exponential and logarithmic functions on complex numbers.  */


inline complex exp(complex X)
{
  return((complex)[Math::exp(((double[2])X)[[0]]) ScalarArith::* Math::cos(((double[2])X)[[1]]),
                   Math::exp(((double[2])X)[[0]]) ScalarArith::* Math::sin(((double[2])X)[[1]])]);
}


inline complex log(complex X)
{
  return((complex)[0.5d
                   ScalarArith::* Math::log(((double[2])X)[[0]] ScalarArith::* ((double[2])X)[[0]]
                          ScalarArith::+ ((double[2])X)[[1]] ScalarArith::* ((double[2])X)[[1]]),
                   Math::atan(((double[2])X)[[1]] ScalarArith::/ ((double[2])X)[[0]])]);
}




  /* Power functions on complex numbers.  */


inline complex pow(complex BASE, complex EXPON)
{
  return(exp(EXPON * log(BASE)));
}


inline complex pow(complex BASE, double  EXPON)
{
  return(exp(toc( EXPON) * log(BASE)));
}


inline complex pow(double  BASE, complex EXPON)
{
  return(exp(EXPON * toc( Math::log(BASE))));
}


inline complex sqrt(complex X)
{
  return((complex)[Math::sqrt(0.5d ScalarArith::*
                   (((double[2])X)[[0]]
                    ScalarArith::+ Math::sqrt(((double[2])X)[[0]] ScalarArith::* ((double[2])X)[[0]]
                            ScalarArith::+ ((double[2])X)[[1]] ScalarArith::* ((double[2])X)[[1]]))),
                   Math::sqrt(0.5d ScalarArith::*
		    ((0d ScalarArith::- 1.0d) ScalarArith::* ((double[2])X)[[0]]
                     ScalarArith::+ Math::sqrt(((double[2])X)[[0]]
                              ScalarArith::* ((double[2])X)[[0]]
                            ScalarArith::+ ((double[2])X)[[1]]
                              ScalarArith::* ((double[2])X)[[1]])))]);
}







