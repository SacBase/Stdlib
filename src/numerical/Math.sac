module Math;

export all;

/******************************************************************************
 *
 * Trigonometric functions.
 *
 ******************************************************************************/

external double sin(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float sin(float x);
    #pragma linksign [0,1]
    #pragma linkname "sinf"
    #pragma header "<math.h>"

external double cos(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float cos(float x);
    #pragma linkname "cosf"
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external double tan(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float tan(float x);
    #pragma linksign [0,1]
    #pragma linkname "tanf"
    #pragma header "<math.h>"

external double asin(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float asin(float x);
    #pragma linksign [0,1]
    #pragma linkname "asinf"
    #pragma header "<math.h>"

external double acos(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float acos(float x);
    #pragma linksign [0,1]
    #pragma linkname "acosf"
    #pragma header "<math.h>"

external double atan(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float atan(float x);
    #pragma linksign [0,1]
    #pragma linkname "atanf"
    #pragma header "<math.h>"

external double atan2(double x, double y);
    #pragma linksign [0,1,2]
    #pragma header "<math.h>"

external float atan2(float x, float y);
    #pragma linksign [0,1,2]
    #pragma linkname "atan2f"
    #pragma header "<math.h>"

inline double, double sincos(double x)
{
    return (sin(x), cos(x));
}

inline float, float sincos(float x)
{
    return (sin(x), cos(x));
}

/******************************************************************************
 *
 * Hyperbolic functions.
 *
 ******************************************************************************/

external double sinh(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float sinh(float x);
    #pragma linksign [0,1]
    #pragma linkname "sinhf"
    #pragma header "<math.h>"

external double cosh(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float cosh(float x);
    #pragma linksign [0,1]
    #pragma linkname "coshf"
    #pragma header "<math.h>"

external double tanh(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float tanh(float x);
    #pragma linksign [0,1]
    #pragma linkname "tanhf"
    #pragma header "<math.h>"

external double asinh(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float asinh(float x);
    #pragma linksign [0,1]
    #pragma linkname "asinhf"
    #pragma header "<math.h>"

external double acosh(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float acosh(float x);
    #pragma linksign [0,1]
    #pragma linkname "acoshf"
    #pragma header "<math.h>"

external double atanh(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float atanh(float x);
    #pragma linksign [0,1]
    #pragma linkname "atanhf"
    #pragma header "<math.h>"

/******************************************************************************
 *
 * Exponential and logarithmic functions.
 *
 ******************************************************************************/

external double exp(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float exp(float x);
    #pragma linksign [0,1]
    #pragma linkname "expf"
    #pragma header "<math.h>"

external double, int frexp(double x);
    #pragma linksign [0,2,1]
    #pragma header "<math.h>"

external float, int frexp(float x);
    #pragma linksign [0,2,1]
    #pragma linkname "frexpf"
    #pragma header "<math.h>"

external double ldexp(double x, int EXP);
    #pragma linksign [0,1,2]
    #pragma header "<math.h>"

external float ldexp(float x, int EXP);
    #pragma linksign [0,1,2]
    #pragma linkname "ldexpf"
    #pragma header "<math.h>"

external double log(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float log(float x);
    #pragma linksign [0,1]
    #pragma linkname "logf"
    #pragma header "<math.h>"

external double log10(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float log10(float x);
    #pragma linksign [0,1]
    #pragma linkname "log10f"
    #pragma header "<math.h>"

external double log2(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float log2(float x);
    #pragma linksign [0,1]
    #pragma linkname "log2f"
    #pragma header "<math.h>"

external uint log2(uint x);
    #pragma linksign [0,1]
    #pragma linkobj "src/intlog.o"
    #pragma linkname "SAC_MATH_log2u"

external ulong log2(ulong x);
    #pragma linksign [0,1]
    #pragma linkobj "src/intlog.o"
    #pragma linkname "SAC_MATH_log2ul"

external double expm1(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float expm1(float x);
    #pragma linksign [0,1]
    #pragma linkname "expm1f"
    #pragma header "<math.h>"

external double log1p(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float log1p(float x);
    #pragma linksign [0,1]
    #pragma linkname "log1pf"
    #pragma header "<math.h>"

external double, double modf(double x);
    #pragma linksign [0,2,1]
    #pragma header "<math.h>"

external float, float modf(float x);
    #pragma linksign [0,2,1]
    #pragma linkname "modff"
    #pragma header "<math.h>"

/******************************************************************************
 *
 * Power functions.
 *
 ******************************************************************************/

inline int pow2(int a)
{
    return _shl_SxS_(1, a);
}

external double pow(double x, double y);
    #pragma linksign [0,1,2]
    #pragma header "<math.h>"

external float pow(float x, float y);
    #pragma linksign [0,1,2]
    #pragma linkname "powf"
    #pragma header "<math.h>"

external double sqrt(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float sqrt(float x);
    #pragma linksign [0,1]
    #pragma linkname "sqrtf"
    #pragma header "<math.h>"

external double cbrt(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float cbrt(float x);
    #pragma linksign [0,1]
    #pragma linkname "cbrtf"
    #pragma header "<math.h>"

/******************************************************************************
 *
 * Nearest integer, absolute value, and remainder functions.
 *
 ******************************************************************************/

external double floor(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float floor(float x);
    #pragma linksign [0,1]
    #pragma linkname "floorf"
    #pragma header "<math.h>"

external double ceil(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float ceil(float x);
    #pragma linksign [0,1]
    #pragma linkname "ceilf"
    #pragma header "<math.h>"

external double fabs(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float fabs(float x);
    #pragma linksign [0,1]
    #pragma linkname "fabsf"
    #pragma header "<math.h>"

external double fmod(double x, double y);
    #pragma linksign [0,1,2]
    #pragma header "<math.h>"

external float fmod(float x, float y);
    #pragma linksign [0,1,2]
    #pragma linkname "fmodf"
    #pragma header "<math.h>"

/******************************************************************************
 *
 * Range testing functions.
 *
 ******************************************************************************/

external bool isinf(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external bool isnan(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external bool isfinite(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

/******************************************************************************
 *
 * Miscellaneous.
 *
 ******************************************************************************/

external double copysign(double x, double y);
    #pragma linksign [0,1,2]
    #pragma header "<math.h>"

external float copysign(float x, float y);
    #pragma linksign [0,1,2]
    #pragma linkname "copysignf"
    #pragma header "<math.h>"

external double rint(double x);
    #pragma linksign [0,1]
    #pragma header "<math.h>"

external float rint(float x);
    #pragma linksign [0,1]
    #pragma linkname "rintf"
    #pragma header "<math.h>"

external double hypot(double x, double y);
    #pragma linksign [0,1,2]
    #pragma header "<math.h>"

external float hypot(float x, float y);
    #pragma linksign [0,1,2]
    #pragma linkname "hypotf"
    #pragma header "<math.h>"

int sign(double x)
{
    return _toi_S_(copysign(1d, x));
}

int sign(float x)
{
    return _toi_S_(copysign(1f, x));
}

/******************************************************************************
 *
 * Numerical constants.
 *
 ******************************************************************************/

inline float fl_e()
{
    return 2.7182818284590452354f;      /* e */
}

inline float fl_log2e()
{
    return 1.4426950408889634074f;      /* log 2e */
}

inline float fl_log10e()
{
    return 0.43429448190325182765f;     /* log 10e */
}

inline float fl_ln2()
{
    return 0.69314718055994530942f;     /* log e2 */
}

inline float fl_ln10()
{
    return 2.30258509299404568402f;     /* log e10 */
}

inline float fl_pi()
{
    return 3.14159265358979323846f;     /* pi */
}

inline float fl_pi_2()
{
    return 1.57079632679489661923f;     /* pi/2 */
}

inline float fl_pi_rec()
{
    return 0.31830988618379067154f;     /* 1/pi */
}

inline float fl_pi_4()
{
    return 0.78539816339744830962f;     /* pi/4 */
}

inline float fl_pi_rec_2()
{
    return 0.63661977236758134308f;     /* 2/pi */
}

inline float fl_sqrtpi_rec_2()
{
    return 1.12837916709551257390f;     /* 2/sqrt(pi) */
}

inline float fl_sqrt2()
{
    return 1.41421356237309504880f;     /* sqrt(2) */
}

inline float fl_sqrt2_rec()
{
    return 0.7071067811865475244f;      /* 1/sqrt(2) */
}

/******************************************************************************
 *
 * Numerical constants.
 *
 ******************************************************************************/

inline double e()
{
    return 2.7182818284590452354d;      /* e */
}

inline double log2e()
{
    return 1.4426950408889634074d;      /* log 2e */
}

inline double log10e()
{
    return 0.43429448190325182765d;     /* log 10e */
}

inline double ln2()
{
    return 0.69314718055994530942d;     /* log e2 */
}

inline double ln10()
{
    return 2.30258509299404568402d;     /* log e10 */
}

inline double pi()
{
    return 3.14159265358979323846d;     /* pi */
}

inline double pi_2()
{
    return 1.57079632679489661923d;     /* pi/2 */
}

inline double pi_rec()
{
    return 0.31830988618379067154d;     /* 1/pi */
}

inline double pi_4()
{
    return 0.78539816339744830962d;     /* pi/4 */
}

inline double pi_rec_2()
{
    return 0.63661977236758134308d;     /* 2/pi */
}

inline double sqrtpi_rec_2()
{
    return 1.12837916709551257390d;     /* 2/sqrt(pi) */
}

inline double sqrt2()
{
    return 1.41421356237309504880d;     /* sqrt(2) */
}

inline double sqrt2_rec()
{
    return 0.70710678118654752440d;     /* 1/sqrt(2) */
}
