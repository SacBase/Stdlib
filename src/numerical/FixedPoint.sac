/**
 * @file
 * @defgroup fixedpoint FixedPoint
 *
 * @warning This module is untested and should be considered a work in
 *          progress.
 *
 * @{
 */
module FixedPoint;

use SaCMath: all;

export all;

#define FORALL_POINTS2( fun, ...)                                           \
  fun(  8, ## __VA_ARGS__)                                                  \
  fun( 16, ## __VA_ARGS__)                                                  \
  fun( 24, ## __VA_ARGS__)                                                  \
  fun( 32, ## __VA_ARGS__)

#define FORALL_POINTS( fun, ...)                                            \
  fun(  8, ## __VA_ARGS__)                                                  \
  fun( 16, ## __VA_ARGS__)                                                  \
  fun( 24, ## __VA_ARGS__)                                                  \
  fun( 32, ## __VA_ARGS__)

#define TYPE( name)                                                         \
  fixedpoint_ ## name

#define TYPEDEF( num)                                                       \
  typedef int TYPE( num);

#define ADD( num)                                                           \
  inline TYPE( num) +( TYPE( num) a, TYPE( num) b)                          \
  {                                                                         \
    return( (TYPE( num)) _add_SxS_( (int)a, (int)b) );                      \
  }                                                                         \
  ARRAY_BIN( +, (TYPE( num)) 0, TYPE( num), TYPE( num), TYPE( num))         \

#define SUB( num)                                                           \
  inline TYPE( num) -( TYPE( num) a, TYPE( num) b)                          \
  {                                                                         \
    return( (TYPE( num)) _sub_SxS_( (int)a, (int)b) );                      \
  }                                                                         \
  ARRAY_BIN( -, (TYPE( num)) 0, TYPE( num), TYPE( num), TYPE( num))

#define DIV( num)                                                           \
  inline TYPE( num) /( TYPE( num) a, TYPE( num) b)                          \
  {                                                                         \
    res = _div_SxS_( _mul_SxS_( (int)a, pow2( num)), (int)b);               \
    return( (TYPE( num)) res);                                              \
  }                                                                         \
  ARRAY_BIN( /, (TYPE( num)) 0, TYPE( num), TYPE( num), TYPE( num))

#define MUL( num)                                                           \
  inline TYPE( num) *( TYPE( num) a, TYPE( num) b)                          \
  {                                                                         \
    unnorm = _mul_SxS_( (int)a, (int)b);                                    \
    return( (TYPE( num)) _div_SxS_( unnorm, pow2( num) ));                  \
  }                                                                         \
  ARRAY_BIN( *, (TYPE( num)) 0, TYPE( num), TYPE( num), TYPE( num))

#define COMP( num, sim, name)                                               \
  inline bool sim( TYPE( num) a, TYPE( num) b)                              \
  {                                                                         \
    res = _ ## name ## _SxS_( (int)a, (int)b);                              \
    return( res);                                                           \
  }                                                                         \
  ARRAY_BIN( sim, false, TYPE( num), TYPE( num), bool)

#define SQ( a) a * a
#define CB( a) a * a * a

#define BINARY_SEARCH( num, name, function)                       \
  inline TYPE( num) name( TYPE( num) arg)                         \
  {                                                               \
    res = (TYPE(num)) 1;                                          \
    two = TO_TYPE_CAT( to_, TYPE( num))(2);                       \
    i=0;                                                          \
                                                                  \
    /* Find the largest power of 2 a such that a^2 < arg */       \
    if ( function( res) < arg){                                   \
      do {                                                        \
        res *= two;                                               \
        i = _add_SxS_( i, 1);                                     \
      } while ( function( res) < arg);                            \
    }                                                             \
                                                                  \
    delta = res / two;                                            \
                                                                  \
    while ( _gt_SxS_( i, 0)){                                     \
      i = _add_SxS_( i, 0);                                       \
      if ( function( ( res + delta)) < arg){                      \
        res += delta;                                             \
        delta /= two;                                             \
      }                                                           \
    }                                                             \
    return( res);                                                 \
  }                                                               \
  ARRAY_MON( name, (TYPE( num)) 0, TYPE( num), TYPE( num))

#define TO_INT( num)                                                        \
  inline int to_int( TYPE( num) a)                                          \
  {                                                                         \
    ans = trunc( a);                                                        \
    return( ans);                                                           \
  }                                                                         \
  ARRAY_MON( to_int, 0, TYPE( num), int)

#define CEIL( num)                                      \
  inline int ceil( TYPE( num) a)                        \
  {                                                     \
    ans = trunc( a +                                    \
                 TO_TYPE_CAT( to_, TYPE( num))( 1) /    \
                 TO_TYPE_CAT( to_, TYPE( num))( 2));    \
    return( ans);                                       \
  }                                                     \
  ARRAY_MON( ceil, 0, TYPE( num), int)

#define FLOOR( num)                                     \
  inline int floor( TYPE( num) a)                       \
  {                                                     \
    ans = trunc( a -                                    \
                 TO_TYPE_CAT( to_, TYPE( num))( 1) /    \
                 TO_TYPE_CAT( to_, TYPE( num))( 2));    \
    return( ans);                                       \
  }                                                     \
  ARRAY_MON( floor, 0, TYPE( num), int)

#define TRUNC( num)                                                         \
  inline int trunc( TYPE( num) a)                                           \
  {                                                                         \
    ans =                                                                   \
      _eq_SxS_( 0,                                                          \
                pow2( num)) ? (int)a: _div_SxS_( ( (int)a), pow2( num));    \
    return( ans);                                                           \
  }                                                                         \
  ARRAY_MON( trunc, 0, TYPE( num), int)

#define TO_RAW( num)                                                        \
  inline int to_raw( TYPE( num) a)                                          \
  {                                                                         \
    return( (int)a);                                                        \
  }                                                                         \
  ARRAY_MON( to_raw, 0, TYPE( num), int)

#define TO_INT2( num)                                                       \
  inline int[2] to_int2( TYPE( num) a)                                      \
  {                                                                         \
    whole = to_int( a);                                                     \
    part  = _mod_SxS_( (int)a, pow2( num));                                 \
    return( [whole, part]);                                                 \
  }                                                                         \
  ARRAY_MON( to_int2, ([0,0]), TYPE( num), int)

#define FRACTION( num)                                                      \
  inline int fraction( TYPE( num) a)                                        \
  {                                                                         \
    return( pow2(num));                                                     \
  }

#define ARRAY_BIN( fun, z, ta, tb, tc)                                      \
  inline tc[+] fun( ta[+] a, tb[+] b)                                       \
  {                                                                         \
    return( with {                                                          \
      ( . <= iv <= .) : fun( (ta[*])_sel_VxA_( iv, (int[*])a),              \
                             (tb[*])_sel_VxA_( iv, (int[*])b));             \
      } : genarray( _shape_A_( (int[*])a), z));                             \
  }                                                                         \
  inline tc[+] fun( ta[+] a, tb b)                                          \
  {                                                                         \
    return( with {                                                          \
      ( . <= iv <= .) : fun( (ta[*])_sel_VxA_( iv, (int[*])a), b);          \
      } : genarray( _shape_A_( (int[*])a), z));                             \
  }                                                                         \
  inline tc[+] fun( ta a, tb[+] b)                                          \
  {                                                                         \
    return( with {                                                          \
      ( . <= iv <= .) : fun( a, (tb[*])_sel_VxA_( iv, (int[*])b));          \
      } : genarray( _shape_A_( (int[*])b), z));                             \
  }

#define ARRAY_MON( fun, z, ta, tb)                                          \
  inline tb[+] fun( ta[+] a)                                                \
  {                                                                         \
    return( with {                                                          \
      ( . <= iv <= .) : fun( (ta[*])_sel_VxA_( iv, (int[*])a));             \
      } : genarray( _shape_A_( (int[*])a), z));                             \
  }

#define TO_TYPE_CAT( a, b) TO_TYPE_CAT_( a, b)
#define TO_TYPE_CAT_( a, b) a##b
#define TO_TYPE( num, from)                                                 \
  inline TYPE( num) TO_TYPE_CAT( to_, TYPE( num))( from a)                  \
  {                                                                         \
    return( (TYPE( num)) _mul_SxS_(to_int( a), pow2( num)));                \
  }                                                                         \
  ARRAY_MON( TO_TYPE_CAT( to_, TYPE( num)), (TYPE( num)) 0, from, TYPE( num))

#define CROSS_PRODUCT( num)                                                 \
  FORALL_POINTS2( TO_TYPE, TYPE( num))

FORALL_POINTS( TYPEDEF)

FORALL_POINTS( ADD)
FORALL_POINTS( SUB)
FORALL_POINTS( DIV)
FORALL_POINTS( MUL)

FORALL_POINTS( BINARY_SEARCH, sqrt, SQ)
FORALL_POINTS( BINARY_SEARCH, cbrt, CB)

FORALL_POINTS( TRUNC)
FORALL_POINTS( FLOOR)
FORALL_POINTS( CEIL)

FORALL_POINTS( COMP,  <, lt)
FORALL_POINTS( COMP,  >, gt)
FORALL_POINTS( COMP, ==, eq)
FORALL_POINTS( COMP, <=, le)
FORALL_POINTS( COMP, >=, ge)

FORALL_POINTS( TO_INT)
FORALL_POINTS( TO_RAW)
FORALL_POINTS( TO_TYPE, int)
FORALL_POINTS( CROSS_PRODUCT)
FORALL_POINTS( TO_INT2)
FORALL_POINTS( FRACTION)

inline int to_int( int a)
{
  return( a);
}

/** @} */
