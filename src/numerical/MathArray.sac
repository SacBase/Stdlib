/**
 * @file
 * @defgroup matharray MathArray
 *
 * @{
 */
module MathArray;

use ScalarArith: {zero};
use ArrayBasics: all;
import Math: all;
export all;

#define OP_A_TEMPLATE(op, restype, argtype)                 \
inline restype[+] op (argtype[+] A)                         \
{                                                           \
  argtype array_elem;                                       \
                                                            \
  result = with {                                           \
             ( . <= iv <= . )                               \
             {                                              \
               array_elem = A[iv];                          \
             } : op( array_elem );                          \
           } : genarray( shape(A), zero(A) );               \
                                                            \
  return(result);                                           \
}

#define OP_AS_TEMPLATE(op, restype, argtype)                \
inline restype[+] op (argtype[+] A, argtype S)              \
{                                                           \
  argtype array_elem;                                       \
                                                            \
  result = with {                                           \
             ( . <= iv <= . )                               \
             {                                              \
               array_elem = A[iv];                          \
             } : op( array_elem, S );                       \
           } : genarray( shape(A), zero(A) );               \
                                                            \
  return(result);                                           \
}

#define ALL_TYPES_1(template, arg1)                     \
template(arg1, float, float)                            \
template(arg1, double, double)

/**
 * @brief Apply `log` function elementwise to the array
 *
 * @param A Input array
 * @return
 */
ALL_TYPES_1( OP_A_TEMPLATE, log)

/**
 * @brief Apply `log2` function elementwise to the array
 *
 * @param A Input array
 * @return
 */
ALL_TYPES_1( OP_A_TEMPLATE, log2)

/**
 * @brief Apply `log10` function elementwise to the array
 *
 * @param A Input array
 * @return
 */
ALL_TYPES_1( OP_A_TEMPLATE, log10)

/**
 * @brief Apply `exp` function elementwise to the array
 *
 * @param A Input array
 * @return
 */
ALL_TYPES_1( OP_A_TEMPLATE, exp)

/**
 * @brief Apply `fabs` function elementwise to the array
 *
 * @param A Input array
 * @return
 */
ALL_TYPES_1( OP_A_TEMPLATE, fabs)

/**
 * @brief Apply `sqrt` function elementwise to the array
 *
 * @param A Input array
 * @return
 */
ALL_TYPES_1( OP_A_TEMPLATE, sqrt)

/**
 * @brief Apply `floor` function elementwise to the array
 *
 * @param A Input array
 * @return
 */
ALL_TYPES_1( OP_A_TEMPLATE, floor)

/**
 * @brief Apply the `pow` function elementwise to the array
 *
 * @param A Input array
 * @param S value to power up to
 * @return
 */
ALL_TYPES_1( OP_AS_TEMPLATE, pow)

/** @} */
