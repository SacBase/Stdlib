CMAKE_MINIMUM_REQUIRED (VERSION 3.20)
INCLUDE ("${CMAKE_SOURCE_DIR}/cmake-common/sac2c-variables.cmake")
INCLUDE ("${CMAKE_SOURCE_DIR}/cmake-common/generate-sac2c-dependency-targets.cmake")
INCLUDE ("${CMAKE_SOURCE_DIR}/cmake/parse-core-ext-files.cmake")

# Check if compiler `flag' is supported, and if so append it to the `var' string.
MACRO (CHECK_SAC2C_CC_FLAG flag var)
    # Generate the name of the check as it is cached
    STRING (REPLACE "-" "" FLAG "${flag}")
    STRING (REPLACE "=" "" FLAG "${FLAG}")
    STRING (TOUPPER ${FLAG} FLAG)

    # we need to treat NVCC differently, we need it to pass the C flags to the
    # actual C-compiler
    IF (("${TARGET}" MATCHES "^cuda.*") OR ("${TARGET}" MATCHES "multi_gpu"))
        SET (__werror "-Xc;-Xcompiler -Werror")
        SET (__flag "-Xc;-Xcompiler ${flag}")
    ELSE ()
        SET (__werror "-Xc;-Werror")
        SET (__flag "-Xc;${flag}")
    ENDIF ()

    # Generate a simple test program and put it into the binary directory.
    FILE (WRITE
        "${CMAKE_BINARY_DIR}/test-${FLAG}.c"
        "int main (void) { return 0; }\n")

    # Call CC via sac2c
    EXECUTE_PROCESS (
        COMMAND
            ${SAC2C_T} ${__werror} ${__flag} -noprelude -cc ccrmod
            "${CMAKE_BINARY_DIR}/test-${FLAG}.c"
            -o "${CMAKE_BINARY_DIR}/test-${FLAG}"
        ERROR_VARIABLE sac2c_exec_error
        RESULT_VARIABLE sac2c_exec_ret
    )

    IF ("${sac2c_exec_ret}" STREQUAL "0")
        SET (${var} "${${var}};${__flag}")
    ELSE ()
        # This is to debug why CC called via sac2c does not support a
        # given flag.
        MESSAGE ("call failed ${sac2c_exec_error}")
    ENDIF ()
ENDMACRO ()


# To ensure we that we are able to generate packages, we need to removed the
# leading `/' on the install paths.
STRING (REPLACE "/usr/local/" "" _install_mod_dir ${INSTALL_MOD_DIR})
STRING (REPLACE "/usr/local/" "" _install_tree_dir ${INSTALL_TREE_DIR})

# This variable will hold all the Mod/Tree files that this module
# will deliver and they will become a part of the all-modules target
# which will be the only default target generated by this makefile.
SET (ALL_SAC_MODULES)

SET (LEX_BIS_DIR "stdio/src/FibreIO")
SET (LEX_SRC "${CMAKE_CURRENT_SOURCE_DIR}/${LEX_BIS_DIR}/FibreScan.l")
SET (LEX_OUT "${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}/lex.FibreScan.c")
SET (BIS_SRC "${CMAKE_CURRENT_SOURCE_DIR}/${LEX_BIS_DIR}/FibreScan.y")
SET (BIS_OUTC "${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}/FibreScan.tab.c")
SET (BIS_OUTH "${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}/FibreScan.tab.h")

# Add rules to build *.[ch] files from *.l and *.y files.
# NOTE that we are not using FLEX_TARGET and BISON_TARGET here
# intentionally, as at the time of writing (06/12/2016) these
# macros do not put correct dependencies which triggers flex/bison
# rebuild at every make invocation.
ADD_CUSTOM_COMMAND (
    OUTPUT "${LEX_OUT}"
    COMMAND ${FLEX_EXECUTABLE} -PFibreScan -o "${LEX_OUT}" "${LEX_SRC}"
    DEPENDS "${LEX_SRC}"
    COMMENT "Running ${FLEX_EXECUTABLE} on `${LEX_SRC}'")

ADD_CUSTOM_COMMAND (
    OUTPUT "${BIS_OUTC}" "${BIS_OUTH}"
    COMMAND ${BISON_EXECUTABLE} --defines  "${BIS_SRC}"
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}"
    DEPENDS "${BIS_SRC}"
    COMMENT "Running ${BISON_EXECUTABLE} on `${BIS_SRC}'")

SET (SAC2C_CC_FLAGS "")
# On some systems we get an error `argument 2 value -3 is negative` in an
# application of `__fgets_alias` originating from `fscanl.c/term_fscanl`.
CHECK_SAC2C_CC_FLAG("-Wno-stringop-overflow" SAC2C_CC_FLAGS)
# Although the following two flags should be set in sac2c, for now we ignore
# these two errors here in StdLib. Once the new package is available we
# can remove the following two lines.
CHECK_SAC2C_CC_FLAG("-Wno-sign-compare" SAC2C_CC_FLAGS)
CHECK_SAC2C_CC_FLAG("-Wno-tautological-compare" SAC2C_CC_FLAGS)
CHECK_SAC2C_CC_FLAG("-Wno-comma" SAC2C_CC_FLAGS)

#flags needed for OSX (clang) as the generated code generates warning otherwise:
SET (FLEX_SAC2C_CC_FLAGS "")
CHECK_SAC2C_CC_FLAG("-Wno-sign-compare" FLEX_SAC2C_CC_FLAGS) #needed on CentOS7
CHECK_SAC2C_CC_FLAG("-Wno-unreachable-code" FLEX_SAC2C_CC_FLAGS) #needed on OSX 10.12

SET (BISON_SAC2C_CC_FLAGS "")
CHECK_SAC2C_CC_FLAG("-Wno-unreachable-code" BISON_SAC2C_CC_FLAGS)
CHECK_SAC2C_CC_FLAG("-Wno-unreachable-code-break" BISON_SAC2C_CC_FLAGS)

# Build object files from FLEX/BISON generated source files.
ADD_CUSTOM_COMMAND (
    OUTPUT
        "${CMAKE_CURRENT_BINARY_DIR}/stdio/src/FibreIO/lex.FibreScan.o"
    DEPENDS
        "${LEX_OUT}" "${BIS_OUTH}"
    COMMAND
        ${SAC2C} -Xc -I${CMAKE_CURRENT_SOURCE_DIR}/${LEX_BIS_DIR}
                 -Xc -I${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}
                 ${FLEX_SAC2C_CC_FLAGS}
                 -v0 -noprelude -cc ccrmod
                 -o "${CMAKE_CURRENT_BINARY_DIR}/stdio/src/FibreIO/lex.FibreScan.o"
                 "${LEX_OUT}"
    WORKING_DIRECTORY
        ${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}
    COMMENT "Generating FibreIO Lexer for target `${TARGET}'")

ADD_CUSTOM_COMMAND (
    OUTPUT
        "${CMAKE_CURRENT_BINARY_DIR}/stdio/src/FibreIO/FibreScan.tab.o"
    DEPENDS
        "${BIS_OUTC}" "${BIS_OUTH}"
    COMMAND
        ${SAC2C} -Xc -I${CMAKE_CURRENT_SOURCE_DIR}/${LEX_BIS_DIR}
                 -Xc -I${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}
                 ${BISON_SAC2C_CC_FLAGS}
                 -v0 -noprelude -cc ccrmod
                 -o "${CMAKE_CURRENT_BINARY_DIR}/stdio/src/FibreIO/FibreScan.tab.o"
                 "${BIS_OUTC}"
    WORKING_DIRECTORY
        ${CMAKE_CURRENT_BINARY_DIR}/${LEX_BIS_DIR}
    COMMENT "Generating FibreIO Parser for target `${TARGET}'")


# C files relatively to thes CMakeLists.txt.
SET (C_DEPS_SRC
    system/src/World/World.c
    system/src/TimeStamp/TimeStamp.c
    system/src/Terminal/terminal.c
    system/src/SysErr/strerror.c
    system/src/SysErr/failsucc.c
    system/src/SysErr/errorcode.c
    system/src/RuntimeError/error.c
    system/src/RTimer/rtimer.c
    system/src/RTClock/rtclock.c
    system/src/Process/system.c
    system/src/Process/process.c
    system/src/Process/pclose.c
    system/src/MTClock/mtclock.c
    system/src/GetOpt/getopt.c
    system/src/FileSystem/testfile.c
    system/src/FileSystem/symlink.c
    system/src/FileSystem/rename.c
    system/src/FileSystem/remove.c
    system/src/FileSystem/pltmp.c
    system/src/FileSystem/mktemp.c
    system/src/FileSystem/filesys.c
    system/src/FileSystem/dir.c
    system/src/FileSystem/access.c
    system/src/Environment/UnsetEnv.c
    system/src/Environment/SetEnv.c
    system/src/Environment/GetEnv.c
    system/src/Environment/ExistEnv.c
    system/src/Environment/Environ.c
    system/src/Environment/Env.c
    system/src/Dir/telldir.c
    system/src/Dir/seekdir.c
    system/src/Dir/rewinddir.c
    system/src/Dir/readdir.c
    system/src/Dir/opendir.c
    system/src/Dir/closedir.c
    system/src/CommandLine/CommandLine.c
    system/src/Clock/to_time.c
    system/src/Clock/strptime.c
    system/src/Clock/strftime.c
    system/src/Clock/sleep.c
    system/src/Clock/mktime.c
    system/src/Clock/isleap.c
    system/src/Clock/isdst.c
    system/src/Clock/gettime.c
    system/src/Clock/extracttime.c
    system/src/Clock/difftime.c
    system/src/Clock/date.c
    system/src/Clock/ctime.c
    system/src/Clock/copytime.c
    system/src/Clock/clock.c
    structures/src/StringArray/shape.c
    structures/src/StringArray/sel.c
    structures/src/StringArray/modarray.c
    structures/src/StringArray/index2offset.c
    structures/src/StringArray/genarray.c
    structures/src/StringArray/free.c
    structures/src/StringArray/dim.c
    structures/src/StringArray/copy.c
    structures/src/StringArray/alloc.c
    structures/src/String/trim.c
    structures/src/String/tostring.c
    structures/src/String/strtok.c
    structures/src/String/strtoi.c
    structures/src/String/strtof.c
    structures/src/String/strtod.c
    structures/src/String/strtake.c
    structures/src/String/strstr.c
    structures/src/String/strsel.c
    structures/src/String/strrchr.c
    structures/src/String/strovwt.c
    structures/src/String/strncat.c
    structures/src/String/strmod.c
    structures/src/String/strlen.c
    structures/src/String/strins.c
    structures/src/String/strext.c
    structures/src/String/strdrop.c
    structures/src/String/strcmp.c
    structures/src/String/strncmp.c
    structures/src/String/strcasecmp.c
    structures/src/String/strncasecmp.c
    structures/src/String/strchr.c
    structures/src/String/strcat.c
    structures/src/String/sscanf.c
    structures/src/String/sscanfstr.c
    structures/src/String/strcspn.c
    structures/src/String/strspn.c
    structures/src/String/sprintf.c
    structures/src/String/itos.c
    structures/src/String/ftos.c
    structures/src/String/dtos.c
    structures/src/String/ctos.c
    structures/src/String/copystr.c
    structures/src/String/freestr.c
    structures/src/String/btos.c
    structures/src/List/tl.c
    structures/src/List/take.c
    structures/src/List/nth.c
    structures/src/List/nil.c
    structures/src/List/length.c
    structures/src/List/hd.c
    structures/src/List/free.c
    structures/src/List/empty.c
    structures/src/List/drop.c
    structures/src/List/cons.c
    structures/src/List/append.c
    structures/src/Format/wordsize.c
    structures/src/Constants/tinydouble.c
    structures/src/Constants/minmax.c
    structures/src/Constants/minint.c
    structures/src/Constants/minfloat.c
    structures/src/Constants/mindouble.c
    structures/src/Constants/maxint.c
    structures/src/Constants/maxfloat.c
    structures/src/Constants/maxdouble.c
    structures/src/Constants/epidouble.c
    structures/src/Constants/randmax.c
    structures/src/Char/ctype.c
    structures/src/Char/Char.c
    structures/src/Bits/BitXOR.c
    structures/src/Bits/BitTwosComplement.c
    structures/src/Bits/BitShiftRight.c
    structures/src/Bits/BitShiftLeft.c
    structures/src/Bits/BitRotateRight.c
    structures/src/Bits/BitRotateLeft.c
    structures/src/Bits/BitOnesComplement.c
    structures/src/Bits/BitOR.c
    structures/src/Bits/BitAND.c
    stdio/src/TermFile/stdstreams.c
    stdio/src/TermFile/printf.c
    stdio/src/TermFile/fputc.c
    stdio/src/TermFile/fgetc.c
    stdio/src/TermFile/fputs.c
    stdio/src/TermFile/puts.c
    stdio/src/TermFile/ungetc.c
    stdio/src/TermFile/fscanf.c
    stdio/src/TermFile/scanf.c
    stdio/src/TermFile/fflush.c
    stdio/src/TermFile/feof.c
    stdio/src/TermFile/fscans.c
    stdio/src/TermFile/fscanl.c
    stdio/src/TermFile/fprintf.c
    stdio/src/File/rm.c
    stdio/src/File/mkstemp.c
    stdio/src/File/fscans.c
    stdio/src/File/fscanl.c
    stdio/src/File/fscanf.c
    stdio/src/File/fprintf.c
    stdio/src/File/fopen.c
    stdio/src/File/fputc.c
    stdio/src/File/fgetc.c
    stdio/src/File/fputs.c
    stdio/src/File/ungetc.c
    stdio/src/File/fflush.c
    stdio/src/File/feof.c
    stdio/src/File/rewind.c
    stdio/src/File/fseek.c
    stdio/src/File/ftell.c
    stdio/src/File/fclose.c
    stdio/src/FibreIO/ScanStringArr.c
    stdio/src/FibreIO/ScanString.c
    stdio/src/FibreIO/ScanOthersArr.c
    stdio/src/FibreIO/ScanOthers.c
    stdio/src/FibreIO/ScanIntArr.c
    stdio/src/FibreIO/ScanInt.c
    stdio/src/FibreIO/ScanFltArr.c
    stdio/src/FibreIO/ScanFlt.c
    stdio/src/FibreIO/ScanDblArr.c
    stdio/src/FibreIO/ScanDbl.c
    stdio/src/FibreIO/FibrePrint.c
    stdio/src/ComplexIO/PrintComplexArray.c
    stdio/src/BinFile/binfopen.c
    stdio/src/BinFile/binfflags.c
    stdio/src/BinFile/binfclose.c
    stdio/src/BinFile/binfWriteDblArr.c
    stdio/src/BinFile/binfReadDblArr.c
    stdio/src/ArrayIO/ShowArray.c
    stdio/src/ArrayIO/PrintArray.c
    numerical/src/Math/int_log.c
    numerical/src/Math/sign.c
    numerical/src/Math/isnan.c
    numerical/src/Math/isinf.c
    numerical/src/Math/isfinite.c
    classes/random/src/Random/Random.c
    classes/random/src/Rand48/Rand48.c
    classes/random/src/Rand/Rand.c
    auxiliary/src/C99Benchmarking/bench.c
)

# Cuda files relatively to thes CMakeLists.txt.
SET (CUDA_DEPS_SRC
    auxiliary/src/CudaBenchmarking/bench.cu
)

# Read the list of sac sources from sac-core-ext.txt
PARSE_CORE_EXT_CONFIG (
    "${CMAKE_SOURCE_DIR}/cmake/sac-core-ext.txt"
    SAC_CORE_SRC
    SAC_EXT_SRC
    XSAC_CORE_SRC
    XSAC_EXT_SRC)

# By default we are always going to build extended version
IF (BUILD_EXT)
    SET (SAC_SRC  ${SAC_CORE_SRC} ${SAC_EXT_SRC})
    SET (XSAC_SRC  ${XSAC_CORE_SRC} ${XSAC_EXT_SRC})
ELSE ()
    SET (SAC_SRC  ${SAC_CORE_SRC})
    SET (XSAC_SRC ${XSAC_CORE_SRC})
ENDIF ()
SET (ALL_SAC_SRC "${SAC_SRC};${XSAC_SRC}")
MESSAGE (DEBUG "Compiled together all source paths: ${ALL_SAC_SRC}")

# This is the main target of the entire build, though it all modules are
# built for all backends (seq, mt_pth, etc.) - depending on config, only
# core modules or core + extended modules are built.
ADD_CUSTOM_TARGET (${TARGET}-all-modules ALL)

# TODO(artem) We may want to introduce a mechanism of generating depenencies
#             on a given sac2c versoin.  That is, recompiler all modules if
#             sac2c version changes.


# For every C source, compile an object file maintaining the right location
# in the binary dir so that sac files can pick it up.
# XXX do we ever pass some extra flags, etc to C files?
FOREACH (name ${C_DEPS_SRC})
  SET (src "${CMAKE_CURRENT_SOURCE_DIR}/${name}")

  GET_FILENAME_COMPONENT (dir ${name} DIRECTORY)

  GET_FILENAME_COMPONENT (dst ${name} NAME_WE)
  SET (dst "${CMAKE_CURRENT_BINARY_DIR}/${dir}/${dst}${OBJEXT}")

  # Make sure that we put the object file in the same location where
  # the source file was.
  FILE (MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${dir}")

  STRING (FIND "${name}" "FibreIO" _is_fibreio)
  ADD_CUSTOM_COMMAND (
    OUTPUT "${dst}"
    MAIN_DEPENDENCY "${src}"
    IMPLICIT_DEPENDS C "${src}"
    DEPENDS "$<$<NOT:$<EQUAL:-1,${_is_fibreio}>>:${BIS_OUTH}>"
    COMMAND
        ${SAC2C} -Xp -I${CMAKE_CURRENT_SOURCE_DIR}/${dir}
                 -Xp -I${CMAKE_CURRENT_BINARY_DIR}/${dir}
                 ${SAC2C_CC_FLAGS}
                 -v0 -noprelude -cc ccrmod -o "${dst}" "${src}"
    WORKING_DIRECTORY
        "${CMAKE_CURRENT_BINARY_DIR}/${dir}"
    COMMENT "Generating ${dst} for target `${TARGET}'"
  )
ENDFOREACH (name)

IF ("${TARGET}" MATCHES "^cuda.*" OR "${TARGET}" MATCHES "multi_gpu")
    FOREACH (name ${CUDA_DEPS_SRC})
      SET (src "${CMAKE_CURRENT_SOURCE_DIR}/${name}")

      GET_FILENAME_COMPONENT (dir ${name} DIRECTORY)

      GET_FILENAME_COMPONENT (dst ${name} NAME_WE)
      SET (dst "${CMAKE_CURRENT_BINARY_DIR}/${dir}/${dst}${OBJEXT}")

      MESSAGE(STATUS "Compiling ${dst}")
      # Make sure that we put the object file in the same location where
      # the source file was.
      FILE (MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${dir}")

      ADD_CUSTOM_COMMAND (
        OUTPUT "${dst}"
        MAIN_DEPENDENCY "${src}"
        IMPLICIT_DEPENDS C "${src}"
        COMMAND
            nvcc -I${CMAKE_CURRENT_SOURCE_DIR}/${dir}
                 -I${CMAKE_CURRENT_BINARY_DIR}/${dir}
                 -O3
                 --compiler-options -fPIC
                 -c "${src}"
                 -o "${dst}"
        WORKING_DIRECTORY
            "${CMAKE_CURRENT_BINARY_DIR}/${dir}"
        COMMENT "Generating ${dst} for target `${TARGET}'"
      )
    ENDFOREACH (name)
ENDIF ()

# Make a directory for sac2c output
FILE (MAKE_DIRECTORY "${DLL_BUILD_DIR}/${TARGET_ENV}/${SBI}")

# This functions tries to match a module name with its stored
# path information in a list. It returns on the first result, or
# returns empty.
FUNCTION (MATCH_NAME_IN_LIST list name ret)
    MESSAGE (DEBUG "Searching for ${name} in list...")
    FOREACH (item ${list})
        IF ("${item}" MATCHES "${name}\.(sac|xsac)")
            MESSAGE (DEBUG "   we have a match: ${item}!")
            SET (${ret} ${item} PARENT_SCOPE)
            BREAK ()
        ENDIF ()
    ENDFOREACH ()
ENDFUNCTION ()

# For every sac file, compile Tree and Mod files.
FOREACH (name ${SAC_SRC})
    SET (src "${CMAKE_CURRENT_SOURCE_DIR}/${name}")
    # sac2c requires computes objectfiles relatively to the working directory
    # of the call to sac2c.
    GET_FILENAME_COMPONENT (dir "${CMAKE_CURRENT_BINARY_DIR}/${name}" DIRECTORY)
    GET_FILENAME_COMPONENT (dst ${name} NAME_WE)
    SET (mod
        "${DLL_BUILD_DIR}/${TARGET_ENV}/${SBI}/lib${dst}Mod${VARIANT}${MODEXT}")
    SET (tree
        "${DLL_BUILD_DIR}/tree/${TARGET_ENV}/${SBI}/lib${dst}Tree${VARIANT}${TREE_DLLEXT}")

    RESOLVE_SAC_DEPS_AS_TARGETS ("${name}" "<TARGET>-module-<NAME>" target_list objs_list source_list)
    MESSAGE (STATUS "Computing dependencies for `${name}'")
    SET (src_deps)
    FOREACH (src_name ${source_list})
        MESSAGE (DEBUG "Searching for ${src_name} in source path list...")
        MATCH_NAME_IN_LIST ("${ALL_SAC_SRC}" "${src_name}" src_path)
        IF (src_path)
            MESSAGE (DEBUG "   found ${src_path}")
            LIST (APPEND src_deps "${CMAKE_CURRENT_SOURCE_DIR}/${src_path}")
        ELSE ()
            MESSAGE (FATAL_ERROR "Unable to find path to ${src_name} in sources!")
        ENDIF ()
    ENDFOREACH ()
    LIST (APPEND deps_list ${src_deps} ${objs_list} ${target_list})
    UNSET (src_deps)
    UNSET (objs_list)
    UNSET (source_list)
    UNSET (target_list)
    MESSAGE (DEBUG "For ${name} the computed dependences are: ${deps_list}")

    # Make sure that we have a directory we are changing to.
    FILE (MAKE_DIRECTORY "${dir}")

    IF (SAC_NOTREE)
        ADD_CUSTOM_TARGET (${TARGET}-module-${dst} DEPENDS "${mod}")
    ELSE ()
        ADD_CUSTOM_TARGET (${TARGET}-module-${dst} DEPENDS "${mod}" "${tree}")
    ENDIF ()
    ADD_DEPENDENCIES (${TARGET}-all-modules ${TARGET}-module-${dst})

    ADD_CUSTOM_COMMAND (
        OUTPUT "${mod}" "${tree}"
        COMMAND
            ${SAC2C} -v0 -linksetsize ${LINKSETSIZE} ${NOTREE_FLAG} ${SAC2C_CC_FLAGS} -o ${DLL_BUILD_DIR} "${src}"
        WORKING_DIRECTORY
            "${dir}"
        MAIN_DEPENDENCY "${src}"
        DEPENDS ${deps_list}
        COMMENT "Building module `${dst}' for target `${TARGET}'")

    # Install compiled Tree/Mod parts of the compiled module
    # to the corresponding locations.
    INSTALL (
        FILES "${mod}"
        DESTINATION ${_install_mod_dir}/${TARGET_ENV}/${SBI}
        COMPONENT modules)
    IF (NOT SAC_NOTREE)
        INSTALL (
            FILES "${tree}"
            DESTINATION ${_install_tree_dir}/tree/${TARGET_ENV}/${SBI}
            COMPONENT trees)
    ENDIF ()
    UNSET (deps_list)
ENDFOREACH (name)

# For every xsac file, compile Tree and Mod files.
FOREACH (name ${XSAC_SRC})
    SET (src "${CMAKE_CURRENT_SOURCE_DIR}/${name}")
    # sac2c requires computes objectfiles relatively to the working directory
    # of the call to sac2c.
    GET_FILENAME_COMPONENT (dir "${CMAKE_CURRENT_BINARY_DIR}/${name}" DIRECTORY)
    GET_FILENAME_COMPONENT (dst ${name} NAME_WE)
    SET (mod
        "${DLL_BUILD_DIR}/${TARGET_ENV}/${SBI}/lib${dst}Mod${MODEXT}")
    SET (tree
        "${DLL_BUILD_DIR}/tree/${TARGET_ENV}/${SBI}/lib${dst}Tree${TREE_DLLEXT}")

    RESOLVE_SAC_DEPS_AS_TARGETS ("${name}" "<TARGET>-module-<NAME>" target_list objs_list source_list)
    MESSAGE (STATUS "Computing dependencies for `${name}'")
    SET (src_deps)
    FOREACH (src_name ${source_list})
        MESSAGE (DEBUG "Searching for ${src_name} in source path list...")
        MATCH_NAME_IN_LIST ("${ALL_SAC_SRC}" "${src_name}" src_path)
        IF (src_path)
            MESSAGE (DEBUG "   found ${src_path}")
            LIST (APPEND src_deps "${CMAKE_CURRENT_SOURCE_DIR}/${src_path}")
        ELSE ()
            MESSAGE (FATAL_ERROR "Unable to find path to ${src_name} in sources!")
        ENDIF ()
    ENDFOREACH ()
    LIST (APPEND deps_list ${src_deps} ${objs_list} ${target_list})
    UNSET (src_deps)
    UNSET (objs_list)
    UNSET (source_list)
    UNSET (target_list)
    MESSAGE (DEBUG "For ${name} the computed dependences are: ${deps_list}")

    # Make sure that we have a directory we are changing to.
    FILE (MAKE_DIRECTORY "${dir}")

    ADD_CUSTOM_COMMAND (
        OUTPUT "${dir}/${dst}.sac"
        COMMAND
            # sac2c calls the preprocessor and the '-cppI's are there anyways!
            cp "${src}" "${dir}/${dst}.sac"
        WORKING_DIRECTORY
            "${dir}"
        DEPENDS "${src}"
        COMMENT "Building `${dst}.sac' from `${dst}.xsac' for target `${TARGET}'")

    IF (SAC_NOTREE)
        ADD_CUSTOM_TARGET (${TARGET}-module-${dst} DEPENDS "${mod}")
    ELSE ()
        ADD_CUSTOM_TARGET (${TARGET}-module-${dst} DEPENDS "${mod}" "${tree}")
    ENDIF ()
    ADD_DEPENDENCIES (${TARGET}-all-modules ${TARGET}-module-${dst})

    ADD_CUSTOM_COMMAND (
        OUTPUT "${mod}" "${tree}"
        COMMAND
            ${SAC2C} -v0 -linksetsize ${LINKSETSIZE} ${SAC2C_CC_FLAGS} -o ${DLL_BUILD_DIR} "${dir}/${dst}.sac"
        WORKING_DIRECTORY
            "${dir}"
        MAIN_DEPENDENCY "${dir}/${dst}.sac"
        DEPENDS ${deps_list}
        COMMENT "Building module `${dst}' for target `${TARGET}'")

    # Install compiled Tree/Mod parts of the compiled module
    # to the corresponding locations.
    INSTALL (
        FILES "${mod}"
        DESTINATION ${_install_mod_dir}/${TARGET_ENV}/${SBI}
        COMPONENT modules)
    IF (NOT SAC_NOTREE)
        INSTALL (
            FILES "${tree}"
            DESTINATION ${_install_tree_dir}/tree/${TARGET_ENV}/${SBI}
            COMPONENT trees)
    ENDIF ()
    UNSET (deps_list)
ENDFOREACH (name)
