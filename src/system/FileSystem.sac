#pragma safe
class FileSystem;

external classtype;

use String: { string };
use SysErr: { syserr };

export all;

objdef FileSystem TheFileSystem = create_TheFileSystem( );

/*
 *  The global object TheFileSys of class FileSys serves as a representation
 *  for a file system. It is derived from the global object world in
 *  order to represent this part or sub-world of the execution environment.
 */

external FileSystem create_TheFileSystem( );
    #pragma effect World::TheWorld
    #pragma linksign [0]
    #pragma linkobj  "src/FileSystem/filesys.o"


  /*
   *  Functions for manipulating entire files.
   */


external syserr rename(string OLDNAME, string NEWNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACrename"
    #pragma linkobj  "src/FileSystem/rename.o"
    #pragma linksign [0,1,2]
    /*
     * Rename file OLDNAME to NEWNAME.
     */


external syserr remove(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACremove"
    #pragma linkobj  "src/FileSystem/remove.o"
    #pragma linksign [0,1]
    /*
     * Remove the file given by PATHNAME from the file system.
     */


external syserr symlink(string PATHNAME, string LINKNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACsymlink"
    #pragma linkobj  "src/FileSystem/symlink.o"
    #pragma linksign [0,1,2]
    /*
     * Create a symbolic link to file PATHNAME which is called LINKNAME.
     */


external bool, syserr access(string PATHNAME, int HOW);
    #pragma effect TheFileSystem
    #pragma linkname "SACaccess"
    #pragma linkobj  "src/FileSystem/access.o"
    #pragma linksign [0,1,2,3]
    /*
     * Test if access to file PATHNAME is granted.
     * HOW specifies the type of access tested:
     *  0: existence
     *  1: read access
     *  2: write access
     *  3: execution access
     *
     * In contrast to C, the result is true iff access is granted.
     */


external bool, syserr isdir(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACisdir"
    #pragma linkobj  "src/FileSystem/testfile.o"
    #pragma linksign [0,1,2]
    /*
     * Test PATHNAME for being a directory.
     */


external bool, syserr isreg(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACisreg"
    #pragma linkobj  "src/FileSystem/testfile.o"
    #pragma linksign [0,1,2]
    /*
     * Test PATHNAME for being a regular file.
     */


external bool, syserr islnk(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACislnk"
    #pragma linkobj  "src/FileSystem/testfile.o"
    #pragma linksign [0,1,2]
    /*
     * Test PATHNAME for being a symbolic link.
     */


external ulonglong, syserr filesize(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACfilesize"
    #pragma linkobj  "src/FileSystem/testfile.o"
    #pragma linksign [0,1,2]
    /*
     * Return the size of the filesystem object in bytes.
     */



  /*
   *  Functions for dealing with directories.
   */


external string getcwd();
    #pragma effect TheFileSystem
    #pragma linkname "SACgetcwd"
    #pragma linkobj  "src/FileSystem/dir.o"
    #pragma linksign [0]
    /*
     * Get the current working directory.
     */


external syserr chdir(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACchdir"
    #pragma linkobj  "src/FileSystem/dir.o"
    #pragma linksign [0,1]
    /*
     * Change the current working directory to PATHNAME.
     */


external syserr mkdir(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACmkdir"
    #pragma linkobj  "src/FileSystem/dir.o"
    #pragma linksign [0,1]
    /*
     * Create the directory PATHNAME.
     */


external syserr rmdir(string PATHNAME);
    #pragma effect TheFileSystem
    #pragma linkname "SACrmdir"
    #pragma linkobj  "src/FileSystem/dir.o"
    #pragma linksign [0,1]
    /*
     * Remove the directory PATHNAME.
     */


  /*
   *  Functions for dealing with temporary files and directories.
   */


external string P_tmpdir();
    #pragma linkname "SACPtmpdir"
    #pragma linkobj  "src/FileSystem/pltmp.o"
    #pragma linksign [0]
    /*
     * Path-prefix for storing temporary files on the specific system,
     * e.g. "/usr/tmp/".
     */


/*
 * Note here that mkstemp lives in File.sac!
 */
external string mkdtemp(string TEMPLATE);
    #pragma effect TheFileSystem
    #pragma linkname "SACmkdtemp"
    #pragma linkobj  "src/FileSystem/mktemp.o"
    #pragma linksign [0,1]
    /*
     * Create a unique file name,  typically  in  a  temporary
     * file system. The  string TEMPLATE
     * should  contain  a file name with six trailing Xs.
     * These Xs are replaced by a letter and the current  process ID.
     * The  letter  will be chosen so that the resulting
     * name does not duplicate an existing file.
     */

