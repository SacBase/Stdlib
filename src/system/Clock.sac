#pragma safe
class Clock;

external classtype;

use String: { string };

export all;

external typedef time;

objdef Clock TheClock = create_TheClock();

external Clock create_TheClock();
    #pragma effect World::TheWorld
    #pragma linkobj "src/Clock/clock.o"
    #pragma linksign [0]
    /*
     * Functions for generating time values.
     */

external time to_time(int secs);
    #pragma linkobj "src/Clock/to_time.o"
    #pragma linkname "SACto_time"
    #pragma linksign [0,1]
    /*
     * Convert seconds since the Epoch into a time value.
     */

external time gettime();
    #pragma effect TheClock
    #pragma linkobj "src/Clock/gettime.o"
    #pragma linkname "SACgettime"
    #pragma linksign [0]
    /* Get the current system time.
     *
     * Note: Although the system clock of course is not effected by a call
     *       to this function, the pragma effect is used instead of touch.
     *       This is done to achieve a sequentialization which is necessary
     *       since the state of the clock is not constant although it may
     *       not be modified from within a SAC program.
     */

external time, bool mktime(int YEAR, int MON, int DAY, int HOUR, int MIN, int SEC);
    #pragma linkobj "src/Clock/mktime.o"
    #pragma linkname "SACmktime"
    #pragma linksign [0,1,2,3,4,5,6,7]
    /*
     * Generate a time value for a given time. The boolean result informs
     * about success or failure (The given time may not be specified as
     * time value).
     */

/******************************************************************************
 *
 * Functions for decomposing time values.
 *
 ******************************************************************************/

external int sec(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SACsec"
    #pragma linksign [0,1]
    /*
     * The number of seconds after the minute, normally in
     * the range 0 to 59, but can be up to 61 to allow for
     * leap seconds.
     */

external int min(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SACmin"
    #pragma linksign [0,1]
    /*
     * The number of minutes after the hour, in the range 0 to 59.
     */

external int hour(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SAChour"
    #pragma linksign [0,1]
    /*
     * The number of hours past midnight, in the range 0 to 23.
     */

external int mday(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SACmday"
    #pragma linksign [0,1]
    /*
     * The day of the month, in the range 1 to 31.
     */

external int mon(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SACmon"
    #pragma linksign [0,1]
    /*
     * The number of months since January, in the range 0 to 11.
     */

external int year(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SACyear"
    #pragma linksign [0,1]
    /*
     * The year, starting with 0=1900.
     */

external int wday(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SACwday"
    #pragma linksign [0,1]
    /*
     * The number of days since Sunday, in the range 0 to 6
     */

external int yday(time T);
    #pragma linkobj "src/Clock/extracttime.o"
    #pragma linkname "SACyday"
    #pragma linksign [0,1]
    /*
     * The number of days since January 1, in the range 0 to 365.
     */

external int, int, int clock(time T);
    #pragma linkobj "src/Clock/date.o"
    #pragma linkname "SACclock"
    #pragma linksign [0,1,2,3]
    /*
     * Extract hours, minutes, and seconds from time value T.
     */

external int, int, int date(time T);
    #pragma linkobj "src/Clock/date.o"
    #pragma linkname "SACdate"
    #pragma linksign [0,1,2,3]
    /*
     * Extract year, month, and day from time value T.
     */

/******************************************************************************
 *
 * Functions for getting additional information about the time.
 *
 ******************************************************************************/

external int isdst(time T);
    #pragma linkobj "src/Clock/isdst.o"
    #pragma linkname "SACisdst"
    #pragma linksign [0,1]
    /*
     * A flag that indicates whether daylight saving time is in effect at
     * the time described. The value is positive if daylight saving time
     * is in effect, zero if it is not, and negative if the information is
     * not available.
     */

external bool isleap(int YEAR);
    #pragma linkobj "src/Clock/isleap.o"
    #pragma linkname "SACisleap"
    #pragma linksign [0,1]

external bool isleap(time T);
    #pragma linkobj "src/Clock/isleap.o"
    #pragma linkname "SACisleapt"
    #pragma linksign [0,1]
    /*
     * Test the given year YEAR or the time value T respectively
     * for being a leap year.
     */

external double difftime(time T1, time T0);
    #pragma linkobj "src/Clock/difftime.o"
    #pragma linkname "SACdifftime"
    #pragma linksign [0,1,2]
    /*
     * The number of seconds elapsed between time T1 and time T0.
     */

/******************************************************************************
 *
 * Functions for converting time values and string representations.
 *
 ******************************************************************************/

external string ctime(time T);
    #pragma linkobj "src/Clock/ctime.o"
    #pragma linkname "SACctime"
    #pragma linksign [0,1]
    /*
     * The ctime() function converts the time T into a string of the form
     *   `Wed Jun 30 21:49:08 1993'
     *
     * The abbreviations for the days of the week are:
     *   `Mon', `Tue', `Wed', `Thu', `Fri', `Sat', and `Sun'.
     * The abbreviations for the months are:
     *   `Jan', `Feb', `Mar', `Apr', `May', `Jun', `Jul',
     *   `Aug', `Sep', `Oct', `Nov', and `Dec'.
     */

external string strftime(int LEN, string FORMAT, time T);
    #pragma linkobj "src/Clock/strftime.o"
    #pragma linkname "SACstrftime"
    #pragma linksign [0,1,2,3]
    /*
     * Convert the time T into a string of maximum length LEN
     * concerning the format string FORMAT. Special time oriented
     * conversion specifiers may be used (see C documentation).
     * If an error occurs the returned string is empty.
     */

external time, string strptime(string S, string FORMAT);
    #pragma linkobj "src/Clock/strptime.o"
    #pragma linkname "SACstrptime"
    #pragma linksign [0,1,2,3]
    /*
     * Complementary function to strftime(),
     * convert the string S into a time value concerning the format
     * string FORMAT. Similar conversion specifiers may be applied as
     * with the strftime() function (see C documentation for details).
     * The resulting string contains the remainder of S not scanned
     * by strptime(). If strptime() fails to match all of the format
     * string an error occurs, the returned remainder string is empty,
     * and the returned time is 0.
     */

external void sleep(int SECONDS);
    #pragma effect World::TheWorld
    #pragma linkobj "src/Clock/sleep.o"
    #pragma linkname "SACsleep"
    #pragma linksign [1]
    /*
     * Make the calling thread sleep until SECONDS seconds have elapsed.
     */
