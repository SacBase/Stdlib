module UTrace;

use Array: { sel };
use String: { string, strlen, to_string };
use ArrayFormat: { format };
use StdIO: { printf, show };
use Indent: all;

export all except { offset, whitespace, printSeparator, printHeader };

objdef Indent offset = newIndent(0);

#define BUILT_IN(fun)                                                          \
fun(int)                                                                       \
fun(float)                                                                     \
fun(double)                                                                    \
fun(bool)                                                                      \
fun(char)

char[n] whitespace(int n)
{
    return { [i] -> ' ' | [i] < [n] };
}

void printSeparator(string pattern)
{
    doIndent(pattern);
    printf("----------------------------------------------\n");
}

void printHeader(string modName, int line)
{
    doIndent("   ");
    printf("%-15s: line %3d: ", modName, line);
    setIndent(offset, 27);
}

/******************************************************************************/

#define SHOW(a)                                                                \
void indentedShow(a[d:shp] arr)                                                \
{                                                                              \
    char[.,.] carr;                                                            \
    carr = format(arr);                                                        \
                                                                               \
    cshape = to_string(format(shp));                                           \
    printf("reshape([ %s ] , [\n", cshape);                                    \
                                                                               \
    spaces = whitespace(_add_SxS_(getIndent(),                                 \
                        _add_SxS_(getIndent(offset),                           \
                        _add_SxS_(strlen(cshape), 18))));                      \
                                                                               \
    ext_carr = with {                                                          \
        (. <= [i] <= . ) : _cat_VxV_(spaces, carr[[i]]);                       \
    } : genarray([_sel_VxA_([0], _shape_A_(carr))],                            \
                 _cat_VxV_(spaces,                                             \
                           whitespace(_sel_VxA_([1], _shape_A_(carr)))));      \
                                                                               \
    show(ext_carr);                                                            \
    incIndent(offset, _add_SxS_(strlen(cshape), 16));                          \
    doIndent("   ");                                                           \
    doIndent(offset, " ");                                                     \
    printf("])\n");                                                            \
    decIndent(offset, _add_SxS_(strlen(cshape), 16));                          \
}                                                                              \
                                                                               \
void indentedShow(a[n,m] arr)                                                  \
{                                                                              \
    char[.,.] carr;                                                            \
    carr = format(arr);                                                        \
                                                                               \
    spaces = whitespace(getIndent() + getIndent(offset));                      \
                                                                               \
    ext_carr = { [i] -> _eq_SxS_(i, 0)                                         \
                            ? _cat_VxV_(carr[[i]], spaces)                     \
                            : _cat_VxV_(spaces, carr[[i]]) };                  \
                                                                               \
    show(ext_carr);                                                            \
}                                                                              \
                                                                               \
void indentedShow(a[.] arr)                                                    \
{                                                                              \
    show(arr);                                                                 \
}                                                                              \
                                                                               \
void indentedShow(a arr)                                                       \
{                                                                              \
    show(arr);                                                                 \
}

BUILT_IN(SHOW)

/******************************************************************************/

void PrintFunEnter(string modName, int line, string funName)
{
    incIndent();
    printSeparator(">  ");
    printHeader(modName, line);
    printf("%s (\n",  funName);
    incIndent(offset, _add_SxS_(strlen(funName), 3));
}

void PrintFunLeave(string modName, int line, string funName)
{
    printSeparator("<  ");
    decIndent();
    decIndent(offset, _add_SxS_(strlen(funName), 2));
}

void PrintArgsDone(string modName, int line, string funName)
{
    doIndent("   ");
    doIndent(offset, " ");
    printf(");\n");
}

#define PRINT_ARG(a)                                                           \
void PrintArg(string modName, int line, string var, a[*] arr)                  \
{                                                                              \
    doIndent("   ");                                                           \
    doIndent(offset, " ");                                                     \
    printf(" %s = ", var);                                                     \
    incIndent(offset, _add_SxS_(strlen(var), 4));                              \
    indentedShow(arr);                                                         \
    decIndent(offset, _add_SxS_(strlen(var), 4));                              \
}

BUILT_IN(PRINT_ARG)

#define PRINT_ASSIGN(a)                                                        \
void PrintAssign(string modName, int line, string var, a[*] arr)               \
{                                                                              \
    printHeader(modName, line);                                                \
    printf("%s = ", var);                                                      \
    incIndent(offset, _add_SxS_(strlen(var), 3));                              \
    indentedShow(arr);                                                         \
    decIndent(offset, _add_SxS_(strlen(var), 3));                              \
}

BUILT_IN(PRINT_ASSIGN)

#define PRINT_RETURN(a)                                                        \
void PrintReturn(string modName, int line, a[*] arr)                           \
{                                                                              \
    printHeader(modName, line);                                                \
    printf("returning ");                                                      \
    incIndent(offset, 10);                                                     \
    indentedShow(arr);                                                         \
    decIndent(offset, 10);                                                     \
}

BUILT_IN(PRINT_RETURN)
