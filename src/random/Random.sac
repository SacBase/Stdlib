class Random;

    /*
     *  Class Random provides a non-linear additive feedback
     *  random number generator employing a default table of size
     *  31 long integers to return successive  pseudo-random  num-
     *  bers  in the range from 0 to rand_max().  The period of this
     *  random  number  generator  is  very  large,  approximately
     *  16*((2**31)-1).
     *
     *  This random number generator offers much better results than
     *  that of class Rand but is also about 2/3 slower.
     */

external classtype;

#ifdef EXT_STDLIB
use Complex: all;
#endif /* ETX_STDLIB  */

export all;

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

external objdef Random RandomGen;

external void srandom(uint SEED);
    #pragma effect Random::RandomGen
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<stdlib.h>"
#else
    #pragma linkobj "src/Random/Random.o"
#endif

    /*
     * Initialize RandomGen to produce a new sequence of pseudo-random
     * numbers.
     */

external long random();
    #pragma linksign [0]
    #pragma effect Random::RandomGen
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<stdlib.h>"
#else
    #pragma linkobj "src/Random/Random.o"
#endif

external int random(int MIN, int MAX);
    #pragma linksign [0,1,2]
    #pragma effect Random::RandomGen
    #pragma linkname "SACrandom"
    #pragma linkobj "src/Random/Random.o"

    /*
     * Use RandomGen to generate a new pseudo-random integer in the range
     * MIN to MAX.
     */


external double random(double MIN, double MAX);
    #pragma linksign [0,1,2]
    #pragma effect Random::RandomGen
    #pragma linkname "SACdrandom"
    #pragma linkobj "src/Random/Random.o"

    /*
     * Use RandomGen to generate a new pseudo-random double precision
     * floating-point number in the interval [MIN, MAX).
     */

#ifdef EXT_STDLIB
complex random(double rmin, double rmax, double imin, double imax)
{
  return(toc(random(rmin,rmax), random(imin,imax)));
}

complex random(complex lb, complex rt)
{
  return(random(real(lb),real(rt),imag(lb),imag(rt)));
}

complex prandom(double rmin, double rmax, double thetamin, double thetamax)
{
  return(polar(random(rmin,rmax),random(thetamin,thetamax)));
}

complex prandom(complex lb, complex rt)
{
  rlb, tlb = ptod(lb);
  rrt, trt = ptod(rt);
  return prandom (ScalarArith::min (rlb, rrt), ScalarArith::max (rlb, rrt), trt, tlb);
}
#endif /* EXT_STDLIB  */

int[*] random( int[.] shp, int MIN, int MAX)
{
  res = with {
          ( . <= iv <= . ) : random( MIN, MAX );
        } : genarray( shp, 0 );
  return( res);
}

double[*] random( int[.] shp, double MIN, double MAX)
{
  res = with {
          ( . <= iv <= . ) : random( MIN, MAX );
        } : genarray( shp, 0d );
  return( res);
}

