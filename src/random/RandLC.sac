/*
* Class RandLC
*/


class RandLC;

classtype double[6];
use ScalarArith: all;
use ArrayBasics: all;

export all;



/*
* randlc_init
* initialisation of randlc
*/

RandLC create_randlc(double x,double a)
{
  r23 = 1d;
  r46 = 1d;
  t23 = 1d;
  t46 = 1d;

  for (i=0; i<23; i++){
    r23 = 0.5d * r23;
    t23 = 2d * t23;
  }

  for (i=0;i<46;i++){
    r46 = 0.5d * r46;
    t46 = 2d * t46;
  }

  randlc = to_RandLC([x,a,r23,r46,t23,t46]);

  return(randlc);
}

/*
 * delete_randlc
 */
void delete_randlc(RandLC randlc)
{
  A = from_RandLC(randlc);
}

/* randlc
 *
 *  generates random number
 */
double randlc (RandLC &randlc)
{
  rlc = from_RandLC( randlc);

  X   = rlc[[0]];
  A   = rlc[[1]];
  R23 = rlc[[2]];
  R46 = rlc[[3]];
  T23 = rlc[[4]];
  T46 = rlc[[5]];

  /*   Break A into two parts such that a = 2^23 * A1 + A2. */
  T1 = R23 * A;
  j = toi(T1);
  A1 = tod(j);
  A2 = A - T23 * A1;

  /*  Break X into two parts such that X = 2^23 * X1 + X2, compute
  * z = A1 * X2 + A2 * X1  (mod 2^23), and then  x = 2^23 * z + A2 * X2  (mod 2^46).
  */

  T1 = R23 * X;
  j = toi(T1);
  X1 = tod(j);
  X2 = X - T23 * X1;
  T1 = A1 * X2 + A2 * X1;

  j = toi(R23 * T1);
  T2 = tod(j);
  Z = T1 - T23 * T2;
  T3 = T23 * Z + A2 * X2;
  j = toi(R46*T3);
  T4 = tod(j);
  X = T3 - T46 * T4;
  res = R46 * X;

  rlc[[0]] = X;

  randlc = to_RandLC(rlc);

  return(res);
}

