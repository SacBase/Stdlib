#pragma safe;
module ArrayTransform;

 /******************************************************************************
 *
 * Depends on ScalarArith, ArrayBasics, and Constants.
 *
 ******************************************************************************/

use ArrayBasics: { sel, genarray };
use Constants: all;

export all;

#include "builtin.mac"
#include "arraytransform.mac"

BUILT_IN(TAKE)
BUILT_IN(DROP)
BUILT_IN(TILE)
BUILT_IN(CAT)
BUILT_IN(CATLAST)
BUILT_IN(REVERSE)
BUILT_IN(REVERSEAXIS)
BUILT_IN(ROTATE)
BUILT_IN(SHIFT)

/******************************************************************************
 *
 * @fn <a>[d:shp_t] transpose(<a>[d:shp] A)
 *
 * @brief transposes the given array.
 *
 ******************************************************************************/

#define TRANSPOSE(typ, _postfix, _fmt, _zval, _oval)                           \
inline                                                                         \
typ[d:shp_t] transpose(typ[d:shp] A)                                           \
    | _all_V_(_eq_VxV_(reverse(shp), shp_t))                                   \
{                                                                              \
    shp_t = reverse(shp);                                                      \
    return { iv -> _sel_VxA_(reverse(iv), A) | iv < shp_t };                   \
}

BUILT_IN(TRANSPOSE)

/******************************************************************************
 *
 * @fn <a>[d:shp] where(bool[d:shp] p, <a>[d:shp] A, <a>[d:shp] B)
 *
 * @brief Selects the element from A if the corresponding value of p is true,
 * otherwise selects the element from B.
 *
 ******************************************************************************/

#define WHERE_AxA(typ, _postfix, _fmt, _zval, _oval)                           \
inline                                                                         \
typ[d:shp] where(bool[d:shp] p, typ[d:shp] A, typ[d:shp] B)                    \
{                                                                              \
    return { iv -> _sel_VxA_(iv, p) ? _sel_VxA_(iv, A) : _sel_VxA_(iv, B) };   \
}

#define WHERE_AxS(typ, _postfix, _fmt, _zval, _oval)                           \
inline                                                                         \
typ[d:shp] where(bool[d:shp] p, typ[d:shp] A, typ B)                           \
{                                                                              \
    return { iv -> _sel_VxA_(iv, p) ? _sel_VxA_(iv, A) : B };                  \
}

#define WHERE_SxA(typ, _postfix, _fmt, _zval, _oval)                           \
inline                                                                         \
typ[d:shp] where(bool[d:shp] p, typ A, typ[d:shp] B)                           \
{                                                                              \
    return { iv -> _sel_VxA_(iv, p) ? A : _sel_VxA_(iv, B) };                  \
}

#define WHERE_SxS(typ, _postfix, _fmt, _zval, _oval)                           \
inline                                                                         \
typ[b:shp] where(bool[b:shp] p, typ A, typ B)                                  \
{                                                                              \
    return { iv -> _sel_VxA_(iv, p) ? A : B };                                 \
}

#define WHERE(typ, postfix, fmt, zval, oval)                                   \
WHERE_AxA(typ, postfix, fmt, zval, oval)                                       \
WHERE_AxS(typ, postfix, fmt, zval, oval)                                       \
WHERE_SxA(typ, postfix, fmt, zval, oval)                                       \
WHERE_SxS(typ, postfix, fmt, zval, oval)

BUILT_IN(WHERE)

/******************************************************************************
 *
 * @fn <a>[n] mask(bool[n] p, <a>[n] A, <a>[n] B)
 *
 * @brief mask has the same semantics as where, but it does not use WLs.
 * These versions are defined on scalars/vectors only, but they could be
 * extended to higher-order arrays via a WL.
 *
 * @remark Unlike where, they compute both legs of the "conditional", which
 * may be a feature or a bug, depending on your point of view.
 *
 ******************************************************************************/

#define MASK_VxVxV(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ[n] mask(bool[n] p, typ[n] A, typ[n] B)                                     \
{                                                                              \
    return _mask_VxVxV_(p, A, B);                                              \
}

#define MASK_VxVxS(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ[n] mask(bool[n] p, typ[n] A, typ B)                                        \
{                                                                              \
    return _mask_VxVxS_(p, A, B);                                              \
}

#define MASK_VxSxV(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ[n] mask(bool[n] p, typ A, typ[n] B)                                        \
{                                                                              \
    return _mask_VxSxV_(p, A, B);                                              \
}

#define MASK_VxSxS(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ[n] mask(bool[n] p, typ A, typ B)                                           \
{                                                                              \
    return _mask_VxSxS_(p, A, B);                                              \
}

#define MASK_SxVxV(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ[n] mask(bool p, typ[n] A, typ[n] B)                                        \
{                                                                              \
    return _mask_SxVxV_(p, A, B);                                              \
}

#define MASK_SxVxS(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ[n] mask(bool p, typ[n] A, typ B)                                           \
{                                                                              \
    return _mask_SxVxS_(p, A, B);                                              \
}

#define MASK_SxSxV(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ[n] mask(bool p, typ A, typ[n] B)                                           \
{                                                                              \
    return _mask_SxSxV_(p, A, B);                                              \
}

#define MASK_SxSxS(typ, _postfix, _fmt, _zval, _oval)                          \
inline                                                                         \
typ mask(bool p, typ A, typ B)                                                 \
{                                                                              \
    return _mask_SxSxS_(p, A, B);                                              \
}

#define MASK(typ, postfix, fmt, zval, oval)                                    \
MASK_VxVxV(typ, postfix, fmt, zval, oval)                                      \
MASK_VxVxS(typ, postfix, fmt, zval, oval)                                      \
MASK_VxSxV(typ, postfix, fmt, zval, oval)                                      \
MASK_SxVxV(typ, postfix, fmt, zval, oval)                                      \
MASK_SxVxS(typ, postfix, fmt, zval, oval)                                      \
MASK_SxSxV(typ, postfix, fmt, zval, oval)                                      \
MASK_SxSxS(typ, postfix, fmt, zval, oval)

// FIXME: Fix _mask_VxSxS_ in ct_prf.c
// MASK_VxSxS(typ, postfix, fmt, zval, oval)

BUILT_IN(MASK)
