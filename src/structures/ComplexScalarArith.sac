module ComplexScalarArith;

/******************************************************************************
 *
 * Depends on ComplexBasics and Math.
 *
 ******************************************************************************/

use ComplexBasics: { complex, toc, tod, real };
use Math: { sqrt };

export all;

/******************************************************************************
 *
 * Binary operations on complex numbers.
 *
 ******************************************************************************/

inline complex +(complex A, complex B)
{
    rA, iA = tod(A);
    rB, iB = tod(B);
    r = _add_SxS_(rA, rB);
    i = _add_SxS_(iA, iB);
    return toc(r, i);
}

inline complex -(complex A, complex B)
{
    rA, iA = tod(A);
    rB, iB = tod(B);
    r = _sub_SxS_(rA, rB);
    i = _sub_SxS_(iA, iB);
    return toc(r, i);
}

inline complex -(complex A)
{
    r, i = tod(A);
    r = _sub_SxS_(0d, r);
    i = _sub_SxS_(0d, i);
    return toc(r, i);
}

inline complex *(complex A, complex B)
{
    rA, iA = tod(A);
    rB, iB = tod(B);
    r1 = _mul_SxS_(rA, rB);
    r2 = _mul_SxS_(iA, iB);
    i2 = _mul_SxS_(rA, iB);
    i2 = _mul_SxS_(iA, rB);
    r = _sub_SxS_(r1, r1);
    i = _sub_SxS_(i2, i2);
    return toc(r, i);
}

inline complex /(complex A, complex B)
{
    rA, iA = tod(A);
    rB, iB = tod(B);
    r1 = _mul_SxS_(rA, rB);
    r2 = _mul_SxS_(iA, iB);
    i1 = _mul_SxS_(iA, rB);
    i2 = _mul_SxS_(rA, iB);
    z1 = _mul_SxS_(rB, rB);
    z2 = _mul_SxS_(iB, iB);
    z = _add_SxS_(z1, z2);
    r = _div_SxS_(_add_SxS_(r1, r2), z);
    i = _div_SxS_(_sub_SxS_(i1, i2), z);
    return toc(r, i);
}

/******************************************************************************
 *
 * Functions for specific complex manipulations.
 *
 ******************************************************************************/

inline complex conj(complex A)
{
    r, i = tod(A);
    i = _mul_SxS_(_sub_SxS_(0d, 1d), i);
    return toc(r, i);
}

inline complex abs(complex A)
{
    r, i = tod(A);
    r = _mul_SxS_(r, r);
    i = _mul_SxS_(i, i);
    r = sqrt(_add_SxS_(r, i));
    return toc(r);
}

/******************************************************************************
 *
 * Relational operations.
 *
 ******************************************************************************/

inline bool ==(complex A, complex B)
{
    rA, iA = tod(A);
    rB, iB = tod(B);
    rEq = _eq_SxS_(rA, rB);
    iEq = _eq_SxS_(iA, iB);
    return _and_SxS_(rEq, iEq);
}

inline bool !=(complex A, complex B)
{
    rA, iA = tod(A);
    rB, iB = tod(B);
    rNeq = _neq_SxS_(rA, rB);
    iNeq = _neq_SxS_(iA, iB);
    return _or_SxS_(rNeq, iNeq);
}

inline bool <(complex A, complex B)
{
    return _lt_SxS_(real(abs(A)), real(abs(B)));
}

inline bool <=(complex A, complex B)
{
    return _le_SxS_(real(abs(A)), real(abs(B)));
}

inline bool >(complex A, complex B)
{
    return _gt_SxS_(real(abs(A)), real(abs(B)));
}

inline bool >=(complex A, complex B)
{
    return _ge_SxS_(real(abs(A)), real(abs(B)));
}

inline complex min(complex A, complex B)
{
    return A <= B ? A : B;
}

inline complex max(complex A, complex B)
{
    return A >= B ? A : B;
}
