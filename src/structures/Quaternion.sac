module Quaternion;

export all;

struct Quaternion {
    double a, b, c, d;
};

/******************************************************************************
 *
 * Array operations.
 *
 ******************************************************************************/

inline struct Quaternion[i:ishp] sel(int[o] idx,
                                     struct Quaternion[o:oshp,i:ishp] arr)
    | _all_V_(_le_SxV_(0, idx)), _all_V_(_lt_VxV_(idx, oshp))
{
    return { iv -> _sel_VxA_(_cat_VxV_(idx, iv), arr) | iv < ishp };
}

inline struct Quaternion[d:shp] sel(int idx, struct Quaternion[n,d:shp] arr)
    | _le_SxS_(0, idx), _lt_SxS_(idx, n)
{
    return sel([idx], arr);
}

/******************************************************************************
 *
 * Binary operations on quaternions.
 *
 ******************************************************************************/

inline struct Quaternion[d:shp] +(struct Quaternion q, double x)
{
    return Quaternion{ _add_SxS_(q.a, x),
                       _add_SxS_(q.b, x),
                       _add_SxS_(q.c, x),
                       _add_SxS_(q.d, x) };
}

inline struct Quaternion[d:shp] +(struct Quaternion[d:shp] q, double x)
{
    return { iv -> q[iv] + x | iv < shp };
}

inline struct Quaternion +(struct Quaternion a, struct Quaternion b)
{
    return Quaternion{ _add_SxS_(a.a, b.a),
                       _add_SxS_(a.b, b.b),
                       _add_SxS_(a.c, b.c),
                       _add_SxS_(a.d, b.d) };
}

inline struct Quaternion[d:shp] +(struct Quaternion[d:shp] a,
                                  struct Quaternion[d:shp] b)
{
    return { iv -> a[iv] + b[iv] | iv < shp };
}

/******************************************************************************/

inline struct Quaternion *(struct Quaternion a, struct Quaternion b)
{
    return Quaternion{
        _sub_SxS_(_mul_SxS_(a.a, b.a),
                  _sub_SxS_(_mul_SxS_(a.b, b.b),
                            _sub_SxS_(_mul_SxS_(a.c, b.c),
                                      _mul_SxS_(a.d, b.d)))),
        _add_SxS_(_mul_SxS_(a.a, b.b),
                  _add_SxS_(_mul_SxS_(a.b, b.a),
                            _sub_SxS_(_mul_SxS_(a.c, b.d),
                                      _mul_SxS_(a.d, b.c)))),
        _sub_SxS_(_mul_SxS_(a.a, b.c),
                  _add_SxS_(_mul_SxS_(a.b, b.d),
                            _add_SxS_(_mul_SxS_(a.c, b.a),
                                      _mul_SxS_(a.d, b.b)))),
        _add_SxS_(_mul_SxS_(a.a, b.d),
                  _sub_SxS_(_mul_SxS_(a.b, b.c),
                            _add_SxS_(_mul_SxS_(a.c, b.b),
                                      _mul_SxS_(a.d, b.a))))
    };
}

inline struct Quaternion[d:shp] *(struct Quaternion a,
                                  struct Quaternion[d:shp] b)
{
    return { iv -> a * b[iv] | iv < shp };
}

inline struct Quaternion[d:shp] *(struct Quaternion[d:shp] a,
                                  struct Quaternion b)
{
    return { iv -> a[iv] * b | iv < shp };
}

inline struct Quaternion[d:shp] *(struct Quaternion[d:shp] a,
                                  struct Quaternion[d:shp] b)
{
    return { iv -> a[iv] * b[iv] | iv < shp };
}
