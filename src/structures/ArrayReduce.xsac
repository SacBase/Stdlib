module ArrayReduce;

/******************************************************************************
 *
 * Depends on ScalarArith and Constants.
 *
 ******************************************************************************/

use Constants: all;

export all;

#include "builtin.mac"

/******************************************************************************
 *
 * @fn <a> reduce(<a>[d>0:shp] arr)
 *
 * @brief Reduces the given array to a single element.
 *
 ******************************************************************************/

#define REDUCE(name, typ, fun, neutral)                                        \
inline typ name(typ[d:shp] arr)                                                \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_(0, shp) <= iv < shp) : _sel_VxA_(iv, arr);                  \
    } : fold(fun, neutral);                                                    \
}

#define NUM_REDUCE(typ, _postfix, _fmt, zval, oval)                            \
REDUCE(sum,    typ, ScalarArith::+,   zval)                                    \
REDUCE(prod,   typ, ScalarArith::*,   oval)                                    \
REDUCE(minval, typ, ScalarArith::min, max##typ())                              \
REDUCE(maxval, typ, ScalarArith::max, min##typ())

NUM(NUM_REDUCE)

#define BOOL_REDUCE(typ, _postfix, _fmt, zval, oval)                           \
REDUCE(any, typ, ScalarArith::|, zval)                                         \
REDUCE(all, typ, ScalarArith::&, oval)

BOOL(BOOL_REDUCE)

/******************************************************************************
 *
 * @fn <a>[i:ishp] rsum(int r, <a>[r:rshp,i:ishp] arr)
 *
 * @brief Sum along the first `r` axes of `arr`.
 *
 ******************************************************************************/

#define RSUM(typ, _postfix, _fmt, _zval, _oval)                                \
inline typ[i:ishp] rsum(int r, typ[r:rshp,i:ishp] arr)                         \
{                                                                              \
    return { iv -> sum({                                                       \
                ov -> _sel_VxA_(_cat_VxV_(ov, iv), arr) | ov < rshp })         \
           | iv < ishp };                                                      \
}

NUM(RSUM)
