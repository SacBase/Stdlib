module Color8;

/******************************************************************************
 *
 * Depends on Numerical.
 *
 ******************************************************************************/

use Numerical: { exp, log };

export all except { genSteps, weights2Clut };

#include "arraybasics.mac"

struct Color8 {
    int r;
    int g;
    int b;
};

/******************************************************************************
 *
 * Array operations.
 *
 ******************************************************************************/

#define COLOR8(fun)                                                            \
fun(struct Color8, /* no postfix */, Color8{0,0,0}, Color8{255,255,255})

COLOR8(DIM)
COLOR8(SHAPE)
COLOR8(SEL)

/******************************************************************************
 *
 * Color operations.
 *
 ******************************************************************************/

inline double[256] genSteps(double from, double to)
{
    return { [i] -> _add_SxS_(from,
                              _div_SxS_(_tod_S_(i),
                                        _mul_SxS_(256d, _sub_SxS_(to, from))))
           | [i] < [256] };
}

inline struct Color8 weights2Clut(double w, struct Color8 c1, struct Color8 c2)
{
    r = _toi_S_(_add_SxS_(_mul_SxS_(w, _tod_S_(c1.r)),
                          _sub_SxS_(1d, _mul_SxS_(w, _tod_S_(c2.r)))));
    g = _toi_S_(_add_SxS_(_mul_SxS_(w, _tod_S_(c1.g)),
                          _sub_SxS_(1d, _mul_SxS_(w, _tod_S_(c2.g)))));
    b = _toi_S_(_add_SxS_(_mul_SxS_(w, _tod_S_(c1.b)),
                          _sub_SxS_(1d, _mul_SxS_(w, _tod_S_(c2.b)))));
    return Color8{ r, g, b };
}

inline struct Color8[256] weights2Clut(double[256] w, struct Color8 c1, struct Color8 c2)
{
    return { iv -> weights2Clut(_sel_VxA_(iv, w), c1, c2) | iv < [256] };
}

inline struct Color8[256] genLinearClut(struct Color8 c1, struct Color8 c2)
{
    weights = genSteps(0d, 1d);
    return weights2Clut(weights, c1, c2);
}

inline struct Color8[256] genLogarithmicClut(double from, double to, struct Color8 c1, struct Color8 c2)
{
    steps = genSteps(from, to);
    weights = _div_VxS_(_sub_VxS_(log(steps), log(from)),
                        _sub_SxS_(log(to), log(from)));
    return weights2Clut(weights, c1, c2);
}

inline struct Color8[256] genExponentialClut(double from, double to, struct Color8 c1, struct Color8 c2)
{
    steps = genSteps(from, to);
    weights = _div_VxS_(_sub_VxS_(exp(steps), exp(from)),
                        _sub_SxS_(exp(to), exp(from)));
    return weights2Clut(weights, c1, c2);
}

inline struct Color8[256] genAlternatingClut(struct Color8 c1, struct Color8 c2)
{
    return with {
        ( . <= [i] <= . step [2]) : c1;
    } : genarray([256], c2);
}

/*
 * h_in is the hue in degrees [0:360]
 * s_in is the saturation in % [0:100]
 * b_in is the brightness in % [0:100]
 */
inline struct Color8 Hsb2Rgb(int h_in, int s_in, int b_in)
{
    c = black();

    if (_eq_SxS_(b_in, 0)) {
        c = black();
    } else if (_eq_SxS_(b_in, 100) && _eq_SxS_(s_in, 0)) {
        c = white();
    } else if (_eq_SxS_(s_in, 0)) {
        c = Color8{ b_in, b_in, b_in };
    } else {
        h = _div_SxS_(_tod_S_(h_in), 60d);
        s = _div_SxS_(_tod_S_(s_in), 100d);
        b = _div_SxS_(_tod_S_(b_in), 100d);

        i = _mod_SxS_(_toi_S_(h), 6);
        f = _sub_SxS_(h, _tod_S_(i));

        if (_eq_SxS_(_mod_SxS_(i, 2), 0)) {
            f = _sub_SxS_(1d, f);
        }

        m = _mul_SxS_(b, _sub_SxS_(1d, s));
        n = _mul_SxS_(b, _sub_SxS_(1d, _mul_SxS_(s, f)));

        b = _toi_S_(_mul_SxS_(b, 255d));
        m = _toi_S_(_mul_SxS_(m, 255d));
        n = _toi_S_(_mul_SxS_(n, 255d));

        if (_eq_SxS_(0, i)) {
            c = Color8{ b, n, m };
        } else if (_eq_SxS_(1, i)) {
            c = Color8{ n, b, m };
        } else if (_eq_SxS_(2, i)) {
            c = Color8{ m, b, n };
        } else if (_eq_SxS_(3, i)) {
            c = Color8{ m, n, b };
        } else if (_eq_SxS_(4, i)) {
            c = Color8{ n, m, b };
        } else if (_eq_SxS_(5, i)) {
            c = Color8{ b, m, n };
        }
    }

    return c;
}

inline struct Color8[d:shp] Hsb2Rgb(int[d:shp] h, int s, int b)
{
    return { iv -> Hsb2Rgb(_sel_VxA_(iv, h), s, b) };
}

inline struct Color8[d:shp] Hsb2Rgb(int[d:shp] h, int[d:shp] s, int[d:shp] b)
{
    return { iv -> Hsb2Rgb(_sel_VxA_(iv, h), _sel_VxA_(iv, s), _sel_VxA_(iv, b)) };
}

/******************************************************************************
 *
 * Binary operations.
 *
 ******************************************************************************/

inline struct Color8 +(struct Color8 a, struct Color8 b)
{
    return Color8{ _add_SxS_(a.r, b.r),
                   _add_SxS_(a.g, b.g),
                   _add_SxS_(a.b, b.b) };
}

inline struct Color8[d:shp] +(struct Color8[d:shp] a, struct Color8[d:shp] b)
{
    return { iv -> _sel_VxA_(iv, a) + _sel_VxA_(iv, b) | iv < shp };
}

inline struct Color8 -(struct Color8 a, struct Color8 b)
{
    return Color8{ _sub_SxS_(a.r, b.r),
                   _sub_SxS_(a.g, b.g),
                   _sub_SxS_(a.b, b.b) };
}

inline struct Color8[d:shp] -(struct Color8[d:shp] a, struct Color8[d:shp] b)
{
    return { iv -> _sel_VxA_(iv, a) - _sel_VxA_(iv, b) | iv < shp };
}

inline struct Color8 *(struct Color8 c, double x)
{
    return Color8{ _toi_S_(_mul_SxS_(_tod_S_(c.r), x)),
                   _toi_S_(_mul_SxS_(_tod_S_(c.g), x)),
                   _toi_S_(_mul_SxS_(_tod_S_(c.b), x)) };
}

inline struct Color8[d:shp] *(struct Color8[d:shp] c, double x)
{
    return { iv -> _sel_VxA_(iv, c) * x | iv < shp };
}

/******************************************************************************
 *
 * Color constants.
 *
 ******************************************************************************/

inline struct Color8 black()
{
    return Color8{ 0, 0, 0 };
}

inline struct Color8 white()
{
    return Color8{ 255, 255, 255 };
}

inline struct Color8 red()
{
    return Color8{ 255, 0, 0 };
}

inline struct Color8 green()
{
    return Color8{ 0, 255, 0 };
}

inline struct Color8 blue()
{
    return Color8{ 0, 0, 255 };
}
