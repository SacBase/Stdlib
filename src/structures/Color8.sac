module Color8;

use Array: all except { *, -, +, reshape, dim, shape, sel, tod, toi};
import Array: { *, -, +, reshape, dim, shape, sel, tod, toi};
use MathArray: all;
export all except { Weights2Clut, genSteps };

typedef int[3] color;

inline color black()
{
  return( (color)[0,0,0]);
}

inline color white()
{
  return( (color)[255,255,255]);
}

inline color red()
{
  return( (color)[255,0,0]);
}

inline color green()
{
  return( (color)[0,255,0]);
}

inline color blue()
{
  return( (color)[0,0,255]);
}

inline int red( color col)
{
  return( ((int[3]) col)[0] );
}

inline int green( color col)
{
  return( ((int[3]) col)[1] );
}

inline int blue( color col)
{
  return( ((int[3]) col)[2] );
}


inline color newColor( int[3] col)
{
  min_col = [0, 0, 0];
  max_col = [255, 255, 255];

  col = max( min( col, max_col), min_col);
  return( (color)col);
}

inline color newColor( int x, int y, int z)
{
  return( newColor( [x,y,z]));
}

inline int[3] toi( color c)
{
  return( (int[3]) c);
}

inline int[*] toi( color[*] c)
{
  return( (int[*]) c);
}

inline double[3] tod( color c)
{
  return( tod( (int[3]) c));
}

inline double[*] tod( color[*] c)
{
  return( tod( (int[*]) c));
}

inline color[256] Weights2Clut( double[256] w, color c1, color c2)
{
  return( ( color[256]) toi( { iv -> w[iv] * tod((int[3]) c1) }
                               + { iv -> (1d - w[iv]) * tod((int[3]) c2) } ));
}

inline double[256] genSteps( double from, double to)
{
  return( from + tod( iota( 256)) / 256d * ( to - from));
}

inline color[256] genLinearClut( color c1, color c2)
{
  weights = genSteps( 0d, 1d);

  return( Weights2Clut( weights, c1, c2));
}

inline color[256] genLogarithmicClut( double from, double to,
                                      color c1, color c2)
{
  steps = genSteps( from, to);

  weights = (log( steps) - log( from)) / (log( to) - log( from));

  return( Weights2Clut( weights, c1, c2));
}

inline color[256] genExponentialClut( double from, double to,
                                      color c1, color c2)
{
  steps = genSteps( from, to);

  weights = (exp( steps) - exp( from)) / (exp( to) - exp( from));

  return( Weights2Clut( weights, c1, c2));
}

inline color[256] genAlternatingClut( color c1, color c2)
{
  res = with {
          ( . <= [i] <= . step [2] ) : c1;
        } : genarray( [256], c2 );

  return( res);
}

/*
 * h_in is the hue in degrees [0:360]
 * s_in is the saturation in % [0:100]
 * b_in is the brightness in % [0:100]
 */
inline color Hsb2Rgb( int h_in , int s_in, int b_in )
{
  col = black( );

  if ( b_in == 0 )
    col = black( );
  else if ( b_in == 100 && s_in == 0 )
    col = white( );
  else if ( s_in == 0 )
    col = newColor( b_in, b_in, b_in );
  else
  {
    h = tod( h_in ) / 60d;
    s = tod( s_in ) / 100d;
    b = tod( b_in ) / 100d;

    i = toi( h ) % 6;
    f = h - tod( i );

    if ( ( i % 2 ) == 0 )
      f = 1d - f;

    m = b * ( 1d - s );
    n = b * ( 1d - s * f );

    b = toi( b * 255d );
    m = toi( m * 255d );
    n = toi( n * 255d );

    if ( 0 == i )
      col = newColor( b, n, m );
    else if ( 1 == i )
      col = newColor( n, b, m );
    else if ( 2 == i )
      col = newColor( m, b, n );
    else if ( 3 == i )
      col = newColor( m, n, b );
    else if ( 4 == i )
      col = newColor( n, m, b );
    else if ( 5 == i )
      col = newColor( b, m, n );
  }

  return( col );
}

inline color[*] Hsb2Rgb( int[*] h_in, int s_in, int b_in)
{
  res = with {
          ( . <= iv <= .) : Hsb2Rgb( h_in[iv], s_in, b_in);
        } : genarray( shape( h_in), black());

  return( res);
}


inline color[*] Hsb2Rgb( int[*] h_in, int[*] s_in, int[*] b_in)
{
  res = with {
          ( . <= iv <= .) : Hsb2Rgb( h_in[iv], s_in[iv], b_in[iv]);
        } : genarray( shape( h_in), black());

  return( res);
}

inline color[*] sel( int idx, color[*] clut)
{
  return( clut[[idx]]);
}

inline color[*] sel( int[.] idx, color[*] a)
{
  res = sel( idx, ((int[*])a));
  return( (color[*])res);
}

inline
int dim( color[*] a)
{
  return( dim((int[*])a) - 1 );
}

inline
int[.] shape( color[*] a)
{
  return( _drop_SxV_( -1, shape((int[*])a)) );
}

inline
color[*] reshape( int[.] shp, color[*] a)
{
  return(  (color[*])_reshape_VxA_( _cat_VxV_(shp, [3]), (int[*])a) );
}



inline
color + (color a, color b)
{
  return( newColor( red(a)   + red(b),
                    green(a) + green(b),
                    blue(a)  + blue(b)));
}

inline
color[*] + (color[*] a, color[*] b)
{
  res = with{
          ( . <= iv <= . ) : a[iv] + b[iv];
        } : genarray( shape( a), black());

  return( res);
}


inline
color - (color a, color b)
{
  return( newColor( red(a)   - red(b),
                    green(a) - green(b),
                    blue(a)  - blue(b)));
}

inline
color[*] - (color[*] a, color[*] b)
{
  res = with{
          ( . <= iv <= . ) : a[iv] -  b[iv];
        } : genarray( shape( a), white());

  return( res);
}


inline
color * (color c, double x)
{
  return( newColor( toi( tod( red(   c)) * x),
                    toi( tod( green( c)) * x),
                    toi( tod( blue(  c)) * x)));
}

inline
color[*] * (color[*] c, double x)
{
  res = with{
          ( . <= iv <= . ) : c[iv] * x;
        } : genarray( shape( c), white());

  return( res);
}
