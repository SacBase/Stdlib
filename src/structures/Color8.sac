module Color8;

/******************************************************************************
 *
 * Depends on Array and Numerical.
 *
 ******************************************************************************/

use Numerical: { exp, log };

export all except { Weights2Clut, genSteps };

typedef int[3] color;

/******************************************************************************
 *
 * Array properties.
 *
 * @note The definition of `dim` and `shape` for user-defined types may not use
 * type patterns, as type patterns rely on the existence of these functions
 * for user-defined types since the primitives `_dim_A_` and `_shape_A_`
 * are not defined for user-defined types.
 *
 ******************************************************************************/

inline int dim(color[*] arr)
{
    return _sub_SxS_(_dim_A_((int[*])arr), 1);
}

inline int[.] shape(color[*] arr)
{
    shp = _shape_A_((int[+])arr);
    shp_len = _sel_VxA_([0], _shape_A_(shp));
    return _take_SxV_(_sub_SxS_(shp_len, 1), shp);
}

inline color[i:ishp] sel(int[o] idx, color[o:oshp,i:ishp] arr)
    | _all_V_(_le_SxV_(0, idx)), _all_V_(_lt_VxV_(idx, oshp))
{
    return (color[*])Array::sel(idx, (int[*])arr);
}

inline color[d:shp] sel(int idx, color[n,d:shp] arr)
    | _le_SxS_(0, idx), _lt_SxS_(idx, n)
{
    return arr[[idx]];
}

inline
color[d:shp] reshape(int[d] shp, color[_:shp_a] arr)
    | _eq_SxS_(Array::prod(shp), Array::prod(shp_a))
{
    return (color[*])_reshape_VxA_(_cat_VxV_(shp, [3]), (int[*])arr);
}

/******************************************************************************
 *
 * Type conversions.
 *
 ******************************************************************************/

inline color newColor(int[3] c)
{
    min_col = [0, 0, 0];
    max_col = [255, 255, 255];
    c = _max_VxV_(_min_VxV_(c, max_col), min_col);
    return (color)c;
}

inline color newColor(int r, int g, int b)
{
    return newColor([r,g,b]);
}

inline int[3] toi(color c)
{
    return (int[3])c;
}

inline int[d:shp,3] toi(color[d:shp] c)
{
    return (int[*])c;
}

inline double[3] tod(color c)
{
    return Array::tod((int[3])c);
}

inline double[d:shp,3] tod(color[d:shp] c)
{
    return Array::tod((int[+])c);
}

inline int red(color c)
{
    return _sel_VxA_([0], (int[3])c);
}

inline int green(color c)
{
    return _sel_VxA_([1], (int[3])c);
}

inline int blue(color c)
{
    return _sel_VxA_([2], (int[3])c);
}

inline int, int, int rgb(color c)
{
    return (red(c), green(c), blue(c));
}

/******************************************************************************
 *
 * Color operations.
 *
 ******************************************************************************/

inline double[256] genSteps(double from, double to)
{
    return _add_SxV_(from,
                     _div_VxS_(Array::tod(Array::iota(256)),
                               _mul_SxS_(256d, _sub_SxS_(to, from))));
}

inline color[256] Weights2Clut(double[256] w, color c1, color c2)
{
    w1 = { iv ->             (_sel_VxA_(iv, w) Array::* tod(c1)) | iv < [256] };
    w2 = { iv -> 1d Array::- (_sel_VxA_(iv, w) Array::* tod(c2)) | iv < [256] };
    return (color[256])Array::toi(w1 Array::+ w2);
}

inline color[256] genLinearClut(color c1, color c2)
{
    weights = genSteps(0d, 1d);
    return Weights2Clut(weights, c1, c2);
}

inline color[256] genLogarithmicClut(double from, double to, color c1, color c2)
{
    steps = genSteps(from, to);
    weights = _div_VxS_(_sub_VxS_(log(steps), log(from)),
                        _sub_SxS_(log(to), log(from)));
    return Weights2Clut(weights, c1, c2);
}

inline color[256] genExponentialClut(double from, double to, color c1, color c2)
{
    steps = genSteps(from, to);
    weights = _div_VxS_(_sub_VxS_(exp(steps), exp(from)),
                        _sub_SxS_(exp(to), exp(from)));
    return Weights2Clut(weights, c1, c2);
}

inline color[256] genAlternatingClut(color c1, color c2)
{
    return with {
        ( . <= [i] <= . step [2]) : c1;
    } : genarray([256], c2);
}

/*
 * h_in is the hue in degrees [0:360]
 * s_in is the saturation in % [0:100]
 * b_in is the brightness in % [0:100]
 */
inline color Hsb2Rgb(int h_in, int s_in, int b_in)
{
    c = black();

    if (_eq_SxS_(b_in, 0)) {
        c = black();
    } else if (_eq_SxS_(b_in, 100) && _eq_SxS_(s_in, 0)) {
        c = white();
    } else if (_eq_SxS_(s_in, 0)) {
        c = newColor(b_in, b_in, b_in);
    } else {
        h = _div_SxS_(_tod_S_(h_in), 60d);
        s = _div_SxS_(_tod_S_(s_in), 100d);
        b = _div_SxS_(_tod_S_(b_in), 100d);

        i = _mod_SxS_(_toi_S_(h), 6);
        f = _sub_SxS_(h, _tod_S_(i));

        if (_eq_SxS_(_mod_SxS_(i, 2), 0)) {
            f = _sub_SxS_(1d, f);
        }

        m = _mul_SxS_(b, _sub_SxS_(1d, s));
        n = _mul_SxS_(b, _sub_SxS_(1d, _mul_SxS_(s, f)));

        b = _toi_S_(_mul_SxS_(b, 255d));
        m = _toi_S_(_mul_SxS_(m, 255d));
        n = _toi_S_(_mul_SxS_(n, 255d));

        if (_eq_SxS_(0, i)) {
            c = newColor(b, n, m);
        } else if (_eq_SxS_(1, i)) {
            c = newColor(n, b, m);
        } else if (_eq_SxS_(2, i)) {
            c = newColor(m, b, n);
        } else if (_eq_SxS_(3, i)) {
            c = newColor(m, n, b);
        } else if (_eq_SxS_(4, i)) {
            c = newColor(n, m, b);
        } else if (_eq_SxS_(5, i)) {
            c = newColor(b, m, n);
        }
    }

    return c;
}

inline color[d:shp] Hsb2Rgb(int[d:shp] h, int s, int b)
{
    return { iv -> Hsb2Rgb(_sel_VxA_(iv, h), s, b) | iv < shp };
}

inline color[d:shp] Hsb2Rgb(int[d:shp] h, int[d:shp] s, int[d:shp] b)
{
    return { iv -> Hsb2Rgb(_sel_VxA_(iv, h), _sel_VxA_(iv, s), _sel_VxA_(iv, b)) | iv < shp };
}

/******************************************************************************
 *
 * Binary operations.
 *
 ******************************************************************************/

inline color +(color a, color b)
{
    r1, g1, b1 = rgb(a);
    r2, g2, b2 = rgb(b);
    return newColor(_add_SxS_(r1, r2), _add_SxS_(g1, g2), _add_SxS_(b1, b2));
}

inline color[d:shp] + (color[d:shp] a, color[d:shp] b)
{
    return { iv -> a[iv] + b[iv] | iv < shp };
}

inline color -(color a, color b)
{
    r1, g1, b1 = rgb(a);
    r2, g2, b2 = rgb(b);
    return newColor(_sub_SxS_(r1, r2), _sub_SxS_(g1, g2), _sub_SxS_(b1, b2));
}

inline color[d:shp] -(color[d:shp] a, color[d:shp] b)
{
    return { iv -> a[iv] - b[iv] | iv < shp };
}

inline color *(color c, double x)
{
    r, g, b = rgb(c);
    return newColor(
        _toi_S_(_mul_SxS_(_tod_S_(r), x)),
        _toi_S_(_mul_SxS_(_tod_S_(g), x)),
        _toi_S_(_mul_SxS_(_tod_S_(b), x))
    );
}

inline color[d:shp] *(color[d:shp] c, double x)
{
    return { iv -> c[iv] * x | iv < shp };
}

/******************************************************************************
 *
 * Color constants.
 *
 ******************************************************************************/

inline color black()
{
    return (color)[0,0,0];
}

inline color white()
{
    return (color)[255,255,255];
}

inline color red()
{
    return (color)[255,0,0];
}

inline color green()
{
    return (color)[0,255,0];
}

inline color blue()
{
    return (color)[0,0,255];
}
