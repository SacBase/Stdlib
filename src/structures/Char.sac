module Char;

export all;

#include "Templates.mac"

/******************************************************************************
 *
 * Test characters of being in a specific range,
 * e.g. in the range of digits, letters, or lower case letters.
 *
 ******************************************************************************/

external bool isalpha(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisalpha"
    #pragma linksign [0,1]

external bool isupper(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisupper"
    #pragma linksign [0,1]

external bool islower(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACislower"
    #pragma linksign [0,1]

external bool isdigit(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisdigit"
    #pragma linksign [0,1]

external bool isxdigit(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisxdigit"
    #pragma linksign [0,1]

external bool isspace(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisspace"
    #pragma linksign [0,1]

external bool ispunct(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACispunct"
    #pragma linksign [0,1]

external bool isalnum(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisalnum"
    #pragma linksign [0,1]

external bool isprint(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisprint"
    #pragma linksign [0,1]

external bool isgraph(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisgraph"
    #pragma linksign [0,1]

external bool iscntrl(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACiscntrl"
    #pragma linksign [0,1]

/******************************************************************************
 *
 * Test integer value for being in the range of the ASCII character set,
 * or convert an integer value into an ASCII character.
 *
 ******************************************************************************/

external bool isascii(int N);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisascii"
    #pragma linksign [0,1]

external char toascii(int N);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACtoascii"
    #pragma linksign [0,1]

/******************************************************************************
 *
 * Convert upper case letters into lower case letters and vice versa.
 *
 ******************************************************************************/

external char tolower(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACtolower"
    #pragma linksign [0,1]

external char toupper(char c);
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACtoupper"
    #pragma linksign [0,1]

/******************************************************************************
 *
 * Convert numerical values into char(byte) values.
 *
 ******************************************************************************/

#define TOCHAR_S(typ)                                                          \
inline char tochar(typ a)                                                      \
{                                                                              \
    return _toc_S_(a);                                                         \
}

#define TOCHAR_A(typ)                                                          \
inline char[d:shp] tochar(typ[d:shp] a)                                        \
{                                                                              \
    return { iv -> _toc_S_(_sel_VxA_(iv, a)) | iv < shp };                     \
}

#define TOCHAR(typ, postfix, zval, oval)                                       \
TOCHAR_S(typ)                                                                  \
TOCHAR_A(typ)

BUILT_IN(TOCHAR)
