module ComplexArrayTransform;

use ComplexArrayBasics: { dim, shape, sel };
use ComplexBasics: { zero, complex };

export all;

#include "UDTtemplates.mac"

#define COMPLEX(fun)                                                           \
fun(complex,                                                                   \
    /* no postfix */,                                                          \
    /* no format */,                                                           \
    ((complex)[0d,0d]),                                                        \
    ((complex)[1d,1d]))

QUATERNION(ROTATE)

/******************************************************************************
 *
 * Structural OPS
 *
 ******************************************************************************/

inline complex sum(complex[d:shp] arr)
{
    return with {
        (_mul_SxV_(0, shp) <= iv < shp) : arr[iv];
    } : fold(ComplexScalarArith::+, (complex)[0d, 0d]);
}

TAKE(complex)

DROP(complex)

TILE(complex)

CAT(complex)

REVERSE(complex)

SHIFT(complex)
