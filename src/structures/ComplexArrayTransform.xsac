module ComplexArrayTransform;

use ComplexArrayBasics: { dim, shape, sel };

// FIXME: The order of the symbols we include make a difference
import ComplexBasics: { zero, complex };

export all;

#include "UDTtemplates.mac"

/******************************************************************************
 *
 * Structural OPS
 *
 ******************************************************************************/

complex
sum( complex[d:shp] A)
{
   zval = ComplexBasics::toc( 0d, 0d);
	res = with {
            (_mul_SxV_( 0, shp) <= iv < shp) : A[ iv];
         } : fold( ComplexArrayArith::+, zval);
   return res;
}

TAKE( complex)

DROP( complex)

TILE( complex)

CAT( complex)

REVERSE( complex)

SHIFT( complex)

ROTATE( complex)
