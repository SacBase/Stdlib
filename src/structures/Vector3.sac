module Vector3;

export all;

struct Vector3 {
    double x;
    double y;
    double z;
};

inline double
l2norm (struct Vector3 v)
{
    x = _mul_SxS_ (v.x, v.x);
    y = _mul_SxS_ (v.y, v.y);
    z = _mul_SxS_ (v.z, v.z);
    return Math::sqrt (_add_SxS_ (_add_SxS_ (x, y), z));
}

/******************************************************************************
 *
 * Binary operations
 *
 ******************************************************************************/

#define VEC3D_BIN_AxA(name, op)                                                \
inline struct Vector3[d:shp]                                                   \
name (struct Vector3[d:shp] a, struct Vector3[d:shp] b)                        \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            Vector3{ op (_sel_VxA_ (iv, a).x, _sel_VxA_ (iv, b).x),            \
                     op (_sel_VxA_ (iv, a).y, _sel_VxA_ (iv, b).y),            \
                     op (_sel_VxA_ (iv, a).z, _sel_VxA_ (iv, b).z) };          \
    } : genarray (shp, Vector3{ 0d, 0d, 0d });                                 \
}

#define VEC3D_BIN_AxS(name, op)                                                \
inline struct Vector3[d:shp]                                                   \
name (struct Vector3[d:shp] a, struct Vector3 b)                               \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            Vector3{ op (_sel_VxA_ (iv, a).x, b.x),                            \
                     op (_sel_VxA_ (iv, a).y, b.y),                            \
                     op (_sel_VxA_ (iv, a).z, b.z) };                          \
    } : genarray (shp, Vector3{ 0d, 0d, 0d });                                 \
}

#define VEC3D_BIN_SxA(name, op)                                                \
inline struct Vector3[d:shp]                                                   \
name (struct Vector3 a, struct Vector3[d:shp] b)                               \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            Vector3{ op (a.x, _sel_VxA_ (iv, b).x),                            \
                     op (a.y, _sel_VxA_ (iv, b).y),                            \
                     op (a.z, _sel_VxA_ (iv, b).z) };                          \
    } : genarray (shp, Vector3{ 0d, 0d, 0d });                                 \
}

#define VEC3D_BIN_AxD(name, op)                                                \
inline struct Vector3[d:shp]                                                   \
name (struct Vector3[d:shp] a, double b)                                       \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            Vector3{ op (_sel_VxA_ (iv, a).x, b),                              \
                     op (_sel_VxA_ (iv, a).y, b),                              \
                     op (_sel_VxA_ (iv, a).z, b) };                            \
    } : genarray (shp, Vector3{ 0d, 0d, 0d });                                 \
}

#define VEC3D_BIN_DxA(name, op)                                                \
inline struct Vector3[d:shp]                                                   \
name (double a, struct Vector3[d:shp] b)                                       \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            Vector3{ op (a, _sel_VxA_ (iv, b).x),                              \
                     op (a, _sel_VxA_ (iv, b).y),                              \
                     op (a, _sel_VxA_ (iv, b).z) };                            \
    } : genarray (shp, Vector3{ 0d, 0d, 0d });                                 \
}

#define VEC3D_BIN_SxS(name, op)                                                \
inline struct Vector3                                                          \
name (struct Vector3 a, struct Vector3 b)                                      \
{                                                                              \
    return Vector3{ op (a.x, b.x), op (a.y, b.y), op (a.z, b.z) };             \
}

#define VEC3D_BIN_SxD(name, op)                                                \
inline struct Vector3                                                          \
name (struct Vector3 a, double b)                                              \
{                                                                              \
    return Vector3{ op (a.x, b), op (a.y, b), op (a.z, b) };                   \
}


#define VEC3D_BIN_DxS(name, op)                                                \
inline struct Vector3                                                          \
name (double a, struct Vector3 b)                                              \
{                                                                              \
    return Vector3{ op (a, b.x), op (a, b.y), op (a, b.z) };                   \
}


#define VEC3D_BIN(name, op)                                                    \
VEC3D_BIN_AxA(name, op)                                                        \
VEC3D_BIN_AxS(name, op)                                                        \
VEC3D_BIN_SxA(name, op)                                                        \
VEC3D_BIN_AxD(name, op)                                                        \
VEC3D_BIN_DxA(name, op)                                                        \
VEC3D_BIN_SxS(name, op)                                                        \
VEC3D_BIN_SxD(name, op)                                                        \
VEC3D_BIN_DxS(name, op)

VEC3D_BIN(+, _add_SxS_)
VEC3D_BIN(-, _sub_SxS_)
VEC3D_BIN(*, _mul_SxS_)
VEC3D_BIN(/, _div_SxS_)

/******************************************************************************
 *
 * Unary operations
 *
 ******************************************************************************/

#define VEC3D_UNARY_A(name, op)                                                \
inline struct Vector3[d:shp]                                                   \
name (struct Vector3[d:shp] a)                                                 \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            Vector3{ op (_sel_VxA_ (iv, a).x),                                 \
                     op (_sel_VxA_ (iv, a).y),                                 \
                     op (_sel_VxA_ (iv, a).z) };                               \
    } : genarray (shp, Vector3{ 0d, 0d, 0d });                                 \
}

#define VEC3D_UNARY_S(name, op)                                                \
inline struct Vector3                                                          \
name (struct Vector3 a)                                                        \
{                                                                              \
    return Vector3{ op (a.x), op (a.y), op (a.z) };                            \
}

#define VEC3D_UNARY(name, op)                                                  \
VEC3D_UNARY_A(name, op)                                                        \
VEC3D_UNARY_S(name, op)

VEC3D_UNARY(-, _neg_S_)

/******************************************************************************
 *
 * Equality operations
 *
 ******************************************************************************/

#define VEC3D_EQ_AxA(name, op, and_or)                                         \
inline bool[d:shp]                                                             \
name (struct Vector3[d:shp] a, struct Vector3[d:shp] b)                        \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            and_or (op (_sel_VxA_ (iv, a).x, _sel_VxA_ (iv, b).x),             \
            and_or (op (_sel_VxA_ (iv, a).y, _sel_VxA_ (iv, b).y),             \
                    op (_sel_VxA_ (iv, a).z, _sel_VxA_ (iv, b).z)));           \
    } : genarray (shp, true);                                                  \
}

#define VEC3D_EQ_AxS(name, op, and_or)                                         \
inline bool[d:shp]                                                             \
name (struct Vector3[d:shp] a, struct Vector3 b)                               \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            and_or (op (_sel_VxA_ (iv, a).x, b.x),                             \
            and_or (op (_sel_VxA_ (iv, a).y, b.y),                             \
                    op (_sel_VxA_ (iv, a).z, b.z)));                           \
    } : genarray (shp, true);                                                  \
}

#define VEC3D_EQ_SxA(name, op, and_or)                                         \
inline bool[d:shp]                                                             \
name (struct Vector3 a, struct Vector3[d:shp] b)                               \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            and_or (op (a.x, _sel_VxA_ (iv, b).x),                             \
            and_or (op (a.y, _sel_VxA_ (iv, b).y),                             \
                    op (a.z, _sel_VxA_ (iv, b).z)));                           \
    } : genarray (shp, true);                                                  \
}

#define VEC3D_EQ_AxD(name, op, and_or)                                         \
inline bool[d:shp]                                                             \
name (struct Vector3[d:shp] a, double b)                                       \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            and_or (op (_sel_VxA_ (iv, a).x, b),                               \
            and_or (op (_sel_VxA_ (iv, a).y, b),                               \
                    op (_sel_VxA_ (iv, a).z, b)));                             \
    } : genarray (shp, true);                                                  \
}

#define VEC3D_EQ_DxA(name, op, and_or)                                         \
inline bool[d:shp]                                                             \
name (double a, struct Vector3[d:shp] b)                                       \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp) :                                     \
            and_or (op (a, _sel_VxA_ (iv, b).x),                               \
            and_or (op (a, _sel_VxA_ (iv, b).y),                               \
                    op (a, _sel_VxA_ (iv, b).z)));                             \
    } : genarray (shp, true);                                                  \
}

#define VEC3D_EQ_SxS(name, op, and_or)                                         \
inline bool                                                                    \
name (struct Vector3 a, struct Vector3 b)                                      \
{                                                                              \
    return and_or (op (a.x, b.x),                                              \
           and_or (op (a.y, b.y),                                              \
                   op (a.z, b.z)));                                            \
}

#define VEC3D_EQ_SxD(name, op, and_or)                                         \
inline bool                                                                    \
name (struct Vector3 a, double b)                                              \
{                                                                              \
    return and_or (op (a.x, b),                                                \
           and_or (op (a.y, b),                                                \
                   op (a.z, b)));                                              \
}

#define VEC3D_EQ_DxS(name, op, and_or)                                         \
inline bool                                                                    \
name (double a, struct Vector3 b)                                              \
{                                                                              \
    return and_or (op (a, b.x),                                                \
           and_or (op (a, b.y),                                                \
                   op (a, b.z)));                                              \
}

#define VEC3D_EQ(name, op, and_or)                                             \
VEC3D_EQ_AxA(name, op, and_or)                                                 \
VEC3D_EQ_AxS(name, op, and_or)                                                 \
VEC3D_EQ_SxA(name, op, and_or)                                                 \
VEC3D_EQ_AxD(name, op, and_or)                                                 \
VEC3D_EQ_DxA(name, op, and_or)                                                 \
VEC3D_EQ_SxS(name, op, and_or)                                                 \
VEC3D_EQ_SxD(name, op, and_or)                                                 \
VEC3D_EQ_DxS(name, op, and_or)

VEC3D_EQ(==, _eq_SxS_,  _and_SxS_)
VEC3D_EQ(!=, _neq_SxS_, _or_SxS_ )
