module ScalarArith;

export all;

#include "builtin.mac"
#include "Templates.mac"

/******************************************************************************
 *
 * @fn <a> zero(<a>[*] A)
 *
 * @brief Yields a scalar zero of the element typ of its argument.
 *
 ******************************************************************************/

#define ZERO(typ, _postfix, _fmt, zval, _oval)                                 \
inline                                                                         \
typ zero(typ[*] A)                                                             \
{                                                                              \
    return zval;                                                               \
}

BUILT_IN(ZERO)

/******************************************************************************
 *
 * @fn <a> one(<a>[*] A)
 *
 * @brief Yields a scalar one of the element typ of its argument.
 *
 ******************************************************************************/

#define ONE(typ, _postfix, _fmt, _zval, oval)                                  \
inline                                                                         \
typ one(typ[*] A)                                                              \
{                                                                              \
    return oval;                                                               \
}

BUILT_IN(ONE)

/******************************************************************************
 *
 * Scalar-extensions for binary monary ops.
 *
 * Calls of these are created when using the macros provided in "Templates.mac"
 * such as MAP_ARI_OPS, MAP_INT_OPS, MAP_REL_OPS.
 *
 ******************************************************************************/

#define MAP_BIN_SxS(name, op, a, b)                                            \
inline                                                                         \
b name(a A, a B)                                                               \
{                                                                              \
    return op(A, B);                                                           \
}

#define MAP_MON_SxS(name, op, a, b)                                            \
inline                                                                         \
b name(a A)                                                                    \
{                                                                              \
    return op(A);                                                              \
}

#define MAP_UNA_S(name, op, a, b)                                              \
inline                                                                         \
a name(a A)                                                                    \
{                                                                              \
    return op(A, one(A));                                                      \
}

/******************************************************************************
 *
 * AriOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

#define ARI_OPS_S(typ, _postfix, _fmt, _zval, _oval)                           \
MAP_ARI_OPS(SxS, typ)

NUM(ARI_OPS_S)

/******************************************************************************/

#define ABS_OP_S(typ, _postfix, _fmt, _zval, _oval)                            \
MAP_ABS_OP(SxS, typ)

#define ABS_NOOP_S(typ, _postfix, _fmt, _zval, _oval)                          \
MAP_ABS_NOOP(SxS, typ)

SIGNED_NUM(ABS_OP_S)
// abs is noop on unsigned numbers
UNSIGNED_INT_NUM(ABS_NOOP_S)

/******************************************************************************/

#define NEG_OP_S(typ, _postfix, _fmt, _zval, _oval)                            \
MAP_NEG_OP(SxS, typ)

// neg only works on signed integers and reals
SIGNED_NUM(NEG_OP_S)

/******************************************************************************/

#define ANA_OPS_S(typ, _postfix, _fmt, _zval, _oval)                           \
MAP_ANA_OPS(S, typ)

NUM(ANA_OPS_S)

/******************************************************************************/

#define INT_OPS_S(typ, _postfix, _fmt, _zval, _oval)                           \
MAP_INT_OPS(SxS, typ)

// mod only supports whole numbers
INT_NUM(INT_OPS_S)

/******************************************************************************
 *
 * RelOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

#define REL_OPS_S(typ, _postfix, _fmt, _zval, _oval)                           \
MAP_REL_OPS(SxS, typ)

BUILT_IN(REL_OPS_S)

/******************************************************************************
 *
 * LogOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

MAP_LOG_OPS(SxS)

/******************************************************************************
 *
 * ConvOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

#define BOOL_CONV_OP_S(typ, _postfix, _fmt, _zval, _oval)                      \
MAP_BOOL_CONV_OP(SxS, typ)

NUM(BOOL_CONV_OP_S)
BOOL(BOOL_CONV_OP_S)

#define NUM_CONV_OPS_S(typ, _postfix, _fmt, _zval, _oval)                      \
MAP_NUM_CONV_OPS(SxS, typ)

BUILT_IN(NUM_CONV_OPS_S)
