module ScalarArith;

export all;

#include "Templates.mac"

/******************************************************************************
 *
 * @fn <a> zero( <a>[*] A)
 *
 * @brief Yields a scalar zero of the element type of its argument.
 *
 ******************************************************************************/

#define ZERO( type, postfix, zval, oval)                                       \
inline                                                                         \
type zero( type[*] A)                                                          \
{                                                                              \
  return zval;                                                                 \
}

BUILT_IN( ZERO)


/******************************************************************************
 *
 * @fn <a> one( <a>[*] A)
 *
 * @brief Yields a scalar one of the element type of its argument.
 *
 ******************************************************************************/

#define ONE( type, postfix, zval, oval)                                        \
inline                                                                         \
type one( type[*] A)                                                           \
{                                                                              \
  return oval;                                                                 \
}

BUILT_IN( ONE)


/******************************************************************************
 *
 * Scalar-extensions for binary monary ops.
 *
 * Calls of these are created when using the macros provided in "Templates.mac"
 * such as MAP_ARI_OPS, MAP_INT_OPS, MAP_REL_OPS.
 *
 ******************************************************************************/

#define MAP_BIN_SxS( name, op, a, b)                                           \
inline                                                                         \
b name( a A, a B)                                                              \
{                                                                              \
  return op( A, B);                                                            \
}

#define MAP_MON_SxS( name, op, a, b)                                           \
inline                                                                         \
b name( a A)                                                                   \
{                                                                              \
  return op( A);                                                               \
}

#define MAP_UNA_S( name, op, a, b)                                             \
inline                                                                         \
a name( a A)                                                                   \
{                                                                              \
  return op(A, one( A));                                                       \
}


/******************************************************************************
 *
 * AriOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

#define ARI_OPS_S( type, postfix, zval, oval)                                  \
MAP_ARI_OPS( SxS, type)

NUM( ARI_OPS_S)

/******************************************************************************/

#define ABS_OP_S( type, postfix, zval, oval)                                   \
MAP_ABS_OP( SxS, type)

#define ABS_NOOP_S( type, postfix, zval, oval)                                 \
MAP_ABS_NOOP( SxS, type)

SIGNED_NUM( ABS_OP_S)
// abs is noop on unsigned numbers
UNSIGNED_INT_NUM( ABS_NOOP_S)

/******************************************************************************/

#define NEG_OP_S( type, postfix, zval, oval)                                   \
MAP_NEG_OP( SxS, type)

// neg only works on signed integers and reals
SIGNED_NUM( NEG_OP_S)

/******************************************************************************/

#define ANA_OPS_S( type, postfix, zval, oval)                                  \
MAP_ANA_OPS( S, type)

NUM( ANA_OPS_S)

/******************************************************************************/

#define INT_OPS_S( type, postfix, zval, oval)                                  \
MAP_INT_OPS( SxS, type)

// mod only supports whole numbers
INT_NUM( INT_OPS_S)


/******************************************************************************
 *
 * RelOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

#define REL_OPS_S( type, postfix, zero, one)                                   \
MAP_REL_OPS( SxS, type)

BUILT_IN( REL_OPS_S)


/******************************************************************************
 *
 * LogOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

MAP_LOG_OPS( SxS)


/******************************************************************************
 *
 * ConvOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

#define BOOL_CONV_OP_S( type, postfix, zero, one)                              \
MAP_BOOL_CONV_OP( SxS, type)

NUM( BOOL_CONV_OP_S)
BOOL( BOOL_CONV_OP_S)

#define NUM_CONV_OPS_S( type, postfix, zero, one)                              \
MAP_NUM_CONV_OPS( SxS, type)

BUILT_IN( NUM_CONV_OPS_S)
