module ArrayArith;

use ScalarArith: { zero, one };

export all;

#include "Templates.mac"

/******************************************************************************
 *
 * Array-extensions for binary monary ops.
 *
 * Calls of these are created when using the macros provided in "Templates.mac"
 * such as MAP_ARI_OPS, MAP_INT_OPS, MAP_REL_OPS.
 *
 * NB: These could be defined in a way that they are applicable to all (not
 * just built-in) types! All that would have to be done is using "sel" and "+"
 * etc. instead of _sel_VxA_ and _add_SxS_. However, this is not done here for
 * efficiency reasons. Using the more general version would cause inlining
 * problems (->dkr).
 *
 ******************************************************************************/

/******************************************************************************
 *
 * We now define the result shape of a dyadic scalar function as being the shape
 * of the right (second) argument. The idea here is that in a composition such
 * as X + (Y * Z), if the result shape of + is driven off the shape of (Y * Z),
 * then we should nearly always be able to WLF the composition. If the result
 * shape is driven off shape(X), then we need other semantic information to
 * prove that the argument shapes match.
 *
 * This change made about a factor of two improvement in the performance of
 * apex/ipbb/ipbb.sac and the Livermore Loop loop09.sac (the latter using the
 * abstract vector-matrix multiply algorithm).
 *
 ******************************************************************************/

#define MAP_BIN_AxA( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a[d:shp] A, a[d:shp] B)                                         \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : op( _sel_VxA_( iv, A), _sel_VxA_( iv, B));                       \
        } : genarray( shp, op( one( A), one( B)));                             \
  return( res);                                                                \
}

#define MAP_BIN_AxS( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a[d:shp] A, a B)                                                \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : op( _sel_VxA_( iv, A), B);                                       \
        } : genarray( shp, op( one( A), one( B)));                             \
  return( res);                                                                \
}

#define MAP_BIN_SxA( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a A, a[d:shp] B)                                                \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : op( A, _sel_VxA_( iv, B));                                       \
        } : genarray( shp, op( one( A), one( B)));                             \
  return( res);                                                                \
}

/******************************************************************************/

#define MAP_BIN_INT_VxV( name, op)                                             \
inline                                                                         \
int[n] (name)( int[n] A, int[n] B)                                             \
{                                                                              \
  res = _##op##_VxV_( A, B);                                                   \
  return( res);                                                                \
}

#define MAP_BIN_INT_VxS( name, op)                                             \
inline                                                                         \
int[n] (name)( int[n] A, int B)                                                \
{                                                                              \
  res = _##op##_VxS_( A, B);                                                   \
  return( res);                                                                \
}

#define MAP_BIN_INT_SxV( name, op)                                             \
inline                                                                         \
int[n] (name)( int A, int[n] B)                                                \
{                                                                              \
  res = _##op##_SxV_( A, B);                                                   \
  return( res);                                                                \
}


/******************************************************************************
 *
 * Array-extensions for monadic ops.
 *
 ******************************************************************************/

#define MAP_MON_AxA( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a[d:shp] A)                                                     \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : op( _sel_VxA_( iv, A));                                          \
        } : genarray( shp, op( zero( A)));                                     \
  return( res);                                                                \
}

#define MAP_MON_AxS( name, op, a, b)
#define MAP_MON_SxA( name, op, a, b)


/******************************************************************************
 *
 * AriOPS on arrays (see Templates.mac for details).
 *
 ******************************************************************************/

#define ARI_OPS_A( typ, postfix, zval, oval)                                   \
MAP_ARI_OPS( AxA, typ)                                                         \
MAP_ARI_OPS( AxS, typ)                                                         \
MAP_ARI_OPS( SxA, typ)

NUM( ARI_OPS_A)

/******************************************************************************/

#define ABS_OP_A( type, postfix, zval, oval)                                   \
MAP_ABS_OP( AxA, type)                                                         \
MAP_ABS_OP( AxS, type)                                                         \
MAP_ABS_OP( SxA, type)

#define ABS_NOOP_A( type, postfix, zval, oval)                                 \
MAP_ABS_NOOP( AxA, type)                                                       \
MAP_ABS_NOOP( AxS, type)                                                       \
MAP_ABS_NOOP( SxA, type)

SIGNED_NUM( ABS_OP_A)
// abs is noop on unsigned numbers
UNSIGNED_INT_NUM( ABS_NOOP_A)

/******************************************************************************/

#define NEG_OP_A( typ, postfix, zval, oval)                                    \
MAP_NEG_OP( AxA, typ)                                                          \
MAP_NEG_OP( AxS, typ)                                                          \
MAP_NEG_OP( SxA, typ)

SIGNED_NUM( NEG_OP_A)

/******************************************************************************/

#define INT_OPS_A( typ, postfix, zval, oval)                                   \
MAP_INT_OPS( AxA, typ)                                                         \
MAP_INT_OPS( AxS, typ)                                                         \
MAP_INT_OPS( SxA, typ)

INT_NUM( INT_OPS_A)


/******************************************************************************
 *
 * RelOPS on arrays (see Templates.mac for details).
 *
 ******************************************************************************/

#define REL_OPS_A( typ, postfix, zval, oval)                                   \
MAP_REL_OPS( AxA, typ)                                                         \
MAP_REL_OPS( AxS, typ)                                                         \
MAP_REL_OPS( SxA, typ)

BUILT_IN( REL_OPS_A)


/******************************************************************************
 *
 * LogOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

MAP_LOG_OPS( AxA)
MAP_LOG_OPS( AxS)
MAP_LOG_OPS( SxA)


/******************************************************************************
 *
 * ConvOPS on scalars (see Templates.mac for details).
 *
 ******************************************************************************/

#define BOOL_CONV_OP_A( type, postfix, zero, one)                              \
MAP_BOOL_CONV_OP( AxA, type)

NUM( BOOL_CONV_OP_A)
BOOL( BOOL_CONV_OP_A)

/******************************************************************************/

#define NUM_CONV_OPS_A( type, postfix, zero, one)                              \
MAP_NUM_CONV_OPS( AxA, type)

BUILT_IN( NUM_CONV_OPS_A)


/******************************************************************************
 *
 * Reduction operations.
 *
 ******************************************************************************/

inline
bool all( bool[d:shp] A)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp)
            : _sel_VxA_( iv, A);
        } : fold( ScalarArith::&, true);
  return( res);
}

inline
bool any( bool[d:shp] A)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp)
            : _sel_VxA_( iv, A);
        } : fold( ScalarArith::|, false);
  return( res);
}
