module ArrayArith;

import ScalarArith: all;
import ArrayBasics: {shape,sel};
import Bool:all;
export all;

#include "Templates.mac"


/********************************************************************************
 *
 * Array-Extensions for binary monary ops
 *
 * Calls of these are created when using the macros provided in "Templates.mac"
 * such as MAP_ARI_OPS, MAP_INT_OPS, MAP_REL_OPS...
 *
 * NB: These could be defined in a way, that they are applicable to ALL (not
 *     just built-in) types! All that would have to be done is using "sel"
 *     and "+" etc. instead of _sel_VxA_ and _add_SxS_.
 *     However, this is not done here for efficiency reasons. Using the
 *     more general version, e.g., would cause inlining problems (->dkr)...
 *
 ********************************************************************************/

/*
 * We now define the result shape of a dyadic scalar function as being
 * the shape of the right (second) argument. The idea here is that
 * in a composition such as `X + ( Y * Z)`, if the result shape of `+`
 * is driven off the shape of `( Y * Z)`, then we should nearly always be able
 * to WLF the composition. If the result shape is driven off shape(X),
 * then we need other semantic information to prove that the argument shapes
 * match.
 *
 * This change made about a factor of two improvement in the performance
 * of apex/ipbb/ipbb.sac and the Livermore Loop loop09.sac (the latter
 * using the abstract vector-matrix multiply algorithm).
 *
 */

#define MAP_BIN_AxA( name, op, a, b)                                               \
inline                                                                             \
b[+] name( a[+] A, a[+] B)                                                       \
{                                                                                  \
  shp = _shape_A_( B);                                                             \
                                                                                   \
  res = with {                                                                     \
          ( . <= iv <= . ) : op ( _sel_VxA_(iv, A), _sel_VxA_(iv, B));             \
        } : genarray( shp, op ( one( A), one( B)));                                \
  return( res);                                                                    \
}

#define MAP_BIN_AxA_MIN( name, op, a, b)                                           \
inline                                                                             \
b[+] name( a[+] A, a[+] B)                                                       \
{                                                                                  \
  fshp = shpmin( _shape_A_( A), _shape_A_(B));                                     \
  cshp = shprem( _shape_A_( A), _shape_A_(B));                                     \
  def = with {                                                                     \
          ( . <= iv <= . ) : op ( one( A), one( B));                               \
        } : genarray( cshp, op ( one( A), one( B)));                               \
  res = with {                                                                     \
          ( . <= iv <= . ) : name ( A[iv], B[iv]);                                 \
        } : genarray( fshp, def);                                                  \
  return( res);                                                                    \
}

#define MAP_BIN_AxS( name, op, a, b)                                  \
inline                                                                \
b[+] name( a[+] A, a B)                                             \
{                                                                     \
  shp = _shape_A_( A);                                                \
  res = with {                                                        \
          ( . <= iv <= . ) : op ( _sel_VxA_(iv, A), B);               \
        } : genarray( shp, op( one( A), one( B)));                    \
  return( res);                                                       \
}

#define MAP_BIN_SxA( name, op, a, b)                                  \
inline                                                                \
b[+] name( a A, a[+] B)                                             \
{                                                                     \
  shp = _shape_A_( B);                                                \
  res = with {                                                        \
          ( . <= iv <= . ) : op ( A, _sel_VxA_(iv, B));               \
        } : genarray( shp, op( one( A), one( B)));                    \
  return( res);                                                       \
}

#define MAP_BIN_INT_VxV( name, op)                 \
inline                                             \
int[.] (name)( int[.] A, int[.] B)                 \
{                                                  \
  res = _##op##_VxV_(A,B);                         \
  return( res);                                    \
}

#define MAP_BIN_INT_SxV( name, op)                 \
inline                                             \
int[.] (name)( int    A, int[.] B)                 \
{                                                  \
  res = _##op##_SxV_(A,B);                         \
  return( res);                                    \
}

#define MAP_BIN_INT_VxS( name, op)                 \
inline                                             \
int[.] (name)( int[.] A, int    B)                 \
{                                                  \
  res = _##op##_VxS_(A,B);                         \
  return( res);                                    \
}

/********************************************************************************
 *
 * Array-Extensions for monadic ops
 *
 ********************************************************************************/

#define MAP_MON_AxA( name, op, a, b)                       \
inline                                                     \
b[+] name( a[+] A)                                       \
{                                                          \
  shp = _shape_A_( A);                                     \
  res = with {                                             \
          ( . <= iv <= . ) : op( _sel_VxA_(iv,A) );        \
        } : genarray( shp, op(zero(A)) );                  \
  return( res);                                            \
}

#define MAP_MON_SxA( name, op, a, b)
#define MAP_MON_AxS( name, op, a, b)




/** <!--********************************************************************-->
 *
 * AriOPS on arrays (see Templates.mac for details)
 *
 ******************************************************************************/

#define ARI_OPS_A( typ, postfix, zval, oval) \
MAP_ARI_OPS( AxA, typ)                 \
MAP_ARI_OPS( SxA, typ)                 \
MAP_ARI_OPS( AxS, typ)

NUM(  ARI_OPS_A)

#define INT_OPS_A( typ, postfix, zval, oval) \
MAP_INT_OPS( AxA, typ)                 \
MAP_INT_OPS( SxA, typ)                 \
MAP_INT_OPS( AxS, typ)

WHOLE_NUM(  INT_OPS_A)

#define INTVEC_OPS( name, op)        \
MAP_BIN_INT_VxV( name, op)           \
MAP_BIN_INT_VxS( name, op)           \
MAP_BIN_INT_SxV( name, op)

#if 0
INTVEC_OPS( +, add)
INTVEC_OPS( -, sub)
INTVEC_OPS( *, mul)
INTVEC_OPS( /, div)
#endif

/** <!--********************************************************************-->
 *
 * RelOPS on arrays (see Templates.mac for details)
 *
 ******************************************************************************/

#define REL_OPS_A( typ, postfix, zval, oval) \
MAP_REL_OPS( AxA, typ)                 \
MAP_REL_OPS( SxA, typ)                 \
MAP_REL_OPS( AxS, typ)

NUM(  REL_OPS_A)
CHAR( REL_OPS_A)

/** <!--********************************************************************-->
 *
 * LogOPS on scalars (see Templates.mac for details)
 *
 ******************************************************************************/

MAP_LOG_OPS( AxA)
MAP_LOG_OPS( SxA)
MAP_LOG_OPS( AxS)


/** <!--********************************************************************-->
 *
 * ConvOPS on scalars (see Templates.mac for details)
 * Can't use a macro here, because of int->int conversion, etc.
 ******************************************************************************/
/* Inconsistent - the compiler doesn't have _tobool_S_
 * defined as a built-in, so we cheat and use the scalar
 * version of to_bool() from Bool.sac.
*/ 

#define MAP_CONVBOOL_OPS(fromtype, postfix, zval, oval)		\
MAP_MON_AxA(to_bool, to_bool, fromtype, bool)	\
MAP_MON_AxS(to_bool, to_bool, fromtype, bool)	\
MAP_MON_SxA(to_bool, to_bool, fromtype, bool)	\

NUM( MAP_CONVBOOL_OPS)

/* These should produce domain error 
MAP_MON_SxA(to_bool, to_bool, char, bool)
MAP_MON_AxS(to_bool, to_bool, char, bool)
MAP_MON_AxA(to_bool, to_bool, char, bool)
 */

#define MAP_CONV_OPS(fromtype, postfix, zval, oval)			\
MAP_MON_AxA(tob, _tob_S_, fromtype, byte)	\
MAP_MON_AxS(tob, _tob_S_, fromtype, byte)	\
MAP_MON_SxA(tob, _tob_S_, fromtype, byte)	\
MAP_MON_AxA(tosh, _tos_S_, fromtype, short)	\
MAP_MON_AxS(tosh, _tos_S_, fromtype, short)	\
MAP_MON_SxA(tosh, _tos_S_, fromtype, short)	\
MAP_MON_AxA(toi, _toi_S_, fromtype, int)	\
MAP_MON_AxS(toi, _toi_S_, fromtype, int)	\
MAP_MON_SxA(toi, _toi_S_, fromtype, int)	\
MAP_MON_AxA(tol, _tol_S_, fromtype, long)	\
MAP_MON_AxS(tol, _tol_S_, fromtype, long)	\
MAP_MON_SxA(tol, _tol_S_, fromtype, long)	\
MAP_MON_AxA(toll, _toll_S_, fromtype, longlong)	\
MAP_MON_AxS(toll, _toll_S_, fromtype, longlong)	\
MAP_MON_SxA(toll, _toll_S_, fromtype, longlong)	\
MAP_MON_AxA(toub, _toub_S_, fromtype, ubyte)	\
MAP_MON_AxS(toub, _toub_S_, fromtype, ubyte)	\
MAP_MON_SxA(toub, _toub_S_, fromtype, ubyte)	\
MAP_MON_AxA(tous, _tous_S_, fromtype, ushort)	\
MAP_MON_AxS(tous, _tous_S_, fromtype, ushort)	\
MAP_MON_SxA(tous, _tous_S_, fromtype, ushort)	\
MAP_MON_AxA(toui, _toui_S_, fromtype, uint)	\
MAP_MON_AxS(toui, _toui_S_, fromtype, uint)	\
MAP_MON_SxA(toui, _toui_S_, fromtype, uint)	\
MAP_MON_AxA(toul, _toul_S_, fromtype, ulong)	\
MAP_MON_AxS(toul, _toul_S_, fromtype, ulong)	\
MAP_MON_SxA(toul, _toul_S_, fromtype, ulong)	\
MAP_MON_AxA(toull, _toull_S_, fromtype, ulonglong)	\
MAP_MON_AxS(toull, _toull_S_, fromtype, ulonglong)	\
MAP_MON_SxA(toull, _toull_S_, fromtype, ulongllong)	\
MAP_MON_AxA(tof, _tof_S_, fromtype, float)	\
MAP_MON_AxS(tof, _tof_S_, fromtype, float)	\
MAP_MON_SxA(tof, _tof_S_, fromtype, float)	\
MAP_MON_AxA(tod, _tod_S_, fromtype, double)	\
MAP_MON_AxS(tod, _tod_S_, fromtype, double)	\
MAP_MON_SxA(tod, _tod_S_, fromtype, double)	\

BUILT_IN(MAP_CONV_OPS)

#define MAP_IDENT_AxA( name, a) \
inline a[*] name( a[*] A)	\
{ /* Identity coercion */	\
 return(A);			\
}

MAP_IDENT_AxA(to_bool, bool)
MAP_IDENT_AxA(tob, byte)
MAP_IDENT_AxA(tosh, short)
MAP_IDENT_AxA(toi, int)
MAP_IDENT_AxA(tol, long)
MAP_IDENT_AxA(toll, longlong)
MAP_IDENT_AxA(toub, ubyte)
MAP_IDENT_AxA(tous, ushort)
MAP_IDENT_AxA(toui, uint)
MAP_IDENT_AxA(toul, ulong)
MAP_IDENT_AxA(toull, ulonglong)
MAP_IDENT_AxA(tof, float)
MAP_IDENT_AxA(tod, double)
MAP_IDENT_AxA(toc, char)



/*
 * Reduction operations
 */

inline bool any( bool[*] a)
{
  res = with {
          (0*shape(a) <= iv < shape(a)) : a[iv];
        } : fold( |, false );
  
  return( res);
}


inline bool all( bool[*] a)
{
  res = with {
          (0*shape(a) <= iv < shape(a)) : a[iv];
        } : fold( &, true );
  
  return( res);
}


/*
 * Auxiliary operations
 */

inline int[.] shpmin( int[.] a, int[.] b)
{
  sa = _sel_VxA_([0], _shape_A_(a));
  sb = _sel_VxA_([0], _shape_A_(b));
  sz = _min_SxS_( sa, sb);
  
  res = with {
         ([0] <= iv < [sz]): _min_SxS_( _sel_VxA_( iv, a), _sel_VxA_( iv, b));
  }: genarray( [sz]);
  
  return( res);
}


inline int[.] shprem( int[.] a, int[.] b)
{
  sa = _sel_VxA_([0], _shape_A_(a));
  sb = _sel_VxA_([0], _shape_A_(b));

  if (_lt_SxS_(sa,sb)) {
    res = _drop_SxV_(sa, _shape_A_(b));
  }
  else{
    res = _drop_SxV_(sb, _shape_A_(a));
  }
  
  return( res);
}

  
