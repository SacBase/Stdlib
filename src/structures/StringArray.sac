module StringArray;

use Array: { +, *, <, <=, !=, all, any, drop, iota, prod, reshape, sum, transpose };
use String: { string };

export all except { _to_stringArray, _sel, _modarray, getIndices };

/******************************************************************************
 *
 * You can create a new stringArray using:
 *
 *   genarray(shp, to_stringArray("default string"))
 *
 * Modarray and sel work as usual and return stringarrays.
 * Use to_string to get a string back out of a scalar stringArray.
 *
 ******************************************************************************/

external typedef stringArray;
    #pragma linkobj "src/StringArray/free.o"
    #pragma linkobj "src/StringArray/copy.o"
    #pragma linkobj "src/StringArray/alloc.o"
    #pragma freefun "SAC_StringArray_free"
    #pragma copyfun "SAC_StringArray_copy"

external int dim(stringArray s);
    #pragma linkname "SAC_StringArray_dim"
    #pragma linkobj "src/StringArray/dim.o"
    #pragma refcounting [0,1]
    #pragma linksign [1,2]

external int[.] shape(stringArray s);
    #pragma linkname "SAC_StringArray_shape"
    #pragma linkobj "src/StringArray/shape.o"
    #pragma refcounting [0,1]
    #pragma linksign [1,2]

external stringArray _to_stringArray(int[.] shp, string s);
    #pragma linkname "SAC_StringArray_genarray"
    #pragma linkobj "src/StringArray/genarray.o"
    #pragma refcounting [0,1,2]
    #pragma linksign [1,2,3]

external string _sel(int[.] idx, stringArray labs);
    #pragma linkname "SAC_StringArray_sel"
    #pragma linkobj "src/StringArray/sel.o"
    #pragma linkobj "src/StringArray/index2offset.o"
    #pragma refcounting [0,1,2]
    #pragma linksign [1,2,3]

external stringArray _modarray(stringArray labs, int[.] idx, string str);
    #pragma linkname "SAC_StringArray_modarray"
    #pragma linkobj "src/StringArray/modarray.o"
    #pragma linkobj "src/StringArray/index2offset.o"
    #pragma refcounting [0,1,2,3]
    #pragma linksign [1,2,3,4]

stringArray modarray(stringArray arr, int[n] idx, stringArray val)
{
    if (any(idx < 0) || any(shape(arr) <= idx)) {
        RuntimeError::error(1,
            "Index out of bounds in call to StringArray::modarray");
    }

    if (n Array::== dim(arr)) {
        if (dim(val) != 0) {
            RuntimeError::error(1,
                "Attempt to use StringArray::modarray to replace scalar "
                "subarray with non-scalar");
        }

        res = _modarray(arr, idx, _sel([], val));
    }
    else if (n < dim(arr)) {
        if (any(shape(val) != drop([n], shape(arr)))) {
            RuntimeError::error(1,
                "Attempt to use StringArray::modarray to replace subarray "
                "with an arr of a different shape");
        }

        res = arr;

        val_shp = drop([n], shape(arr));
        o, indices = getIndices(val_shp);
        for (i = 0; i < o; i += 1) {
            selection = Array::sel([i], indices);
            modarrayidx = idx Array::++ selection;
            modArrVal = _sel(Array::sel([i], indices), val);
            res = _modarray(res, modarrayidx, modArrVal);
        }
    }
    else {
        res = arr;
        RuntimeError::error(1,
            "Overlarge index vector passed to StringArray::modarray");
    }

    return res;
}

stringArray sel(int[n] idx, stringArray arr)
{
    if (any(idx < 0) || any(shape(arr) <= idx)) {
        RuntimeError::error(1,
            "Index out of bounds in call to StringArray::sel");
    }

    if (n Array::== dim(arr)) {
        res = to_stringArray(_sel(idx, arr));
    }
    else if (n < dim(arr)) {
        res_shp = drop([n], shape(arr));
        if (Array::sel([0], res_shp) Array::== 0) {
            RuntimeError::error(1, "res_shape is [0]");
        }

        res = genarray(res_shp, to_stringArray(""));

        o, indices = getIndices(shape(res));
        for (i = 0; i < o; i += 1) {
            res = modarray(res,
                           Array::sel([i], indices),
                           sel(idx Array::++ Array::sel([i], indices), arr));
        }
    }
    else {
        res = arr;
        RuntimeError::error(1,
            "Attempt to select into a stringArray with an index vector "
            "longer than the stringArray's dimensionality");
    }

    return res;
}

string to_string(stringArray a)
{
    if (dim(a) != 0) {
        RuntimeError::error(1,
            "StringArray::to_string passed non-scalar stringArray");
    }

    return _sel([], a);
}

stringArray to_stringArray(string s)
{
    return _to_stringArray([], s);
}

stringArray genarray(int[.] shp, stringArray s)
{
    new_shp = shp Array::++ shape(s);
    res = _to_stringArray(new_shp, "");

    o, indices = getIndices(shp);
    for (i = 0; i < o; i += 1) {
        res = modarray(res, Array::sel([i], indices), s);
    }

    return res;
}

inline
bool[*] ==(stringArray a, stringArray b)
{
    if (dim(a) Array::== 0) {
        if (dim(b) Array::== 0) {
            res = to_string(a) String::== to_string(b);
        } else {
            res = { iv -> to_string(a) String::== _sel(iv, b)
                  | iv < shape(b) };
        }
    } else {
        if (dim(b) Array::== 0) {
            res = { iv -> _sel(iv, a) String::== to_string(b)
                  | iv < shape(a) };
        } else if (all(shape(a) Array::== shape(b))) {
            res = { iv -> _sel(iv, a) String::== _sel(iv, b)
                  | iv < shape(a) };
        } else {
            RuntimeError::error(1,
                "StringArray::== applied to arrays of different shape!");
            res = false;
        }
    }

    return res;
}

stringArray ++(stringArray m1, stringArray m2)
{
    if (dim(m1) Array::== 0) {
        RuntimeError::error(1,
            "Cannot concat stringArrays since argument 1 is a scalar");
    }
    if (dim(m2) Array::== 0) {
        RuntimeError::error(1,
            "Cannot concat stringArrays since argument 2 is a scalar");
    }
    if (dim(m1) != dim(m2)) {
        RuntimeError::error(1,
            "Cannot concat stringArrays with differing dimensions");
    }

    m1InnerShape = drop([1], shape(m1));
    m2InnerShape = drop([1], shape(m2));

    if (any(m1InnerShape != m2InnerShape)) {
        RuntimeError::error(1,
            "Attempt to concat non-matching shapes when trying to "
            "concat two stringArrays");
    }

    m1Len = Array::sel([0], shape(m1));
    m2Len = Array::sel([0], shape(m2));
    resShape = [m1Len + m2Len] Array::++ m1InnerShape;
    res = genarray(resShape, to_stringArray(""));

    for (i = 0; i < m1Len; i += 1) {
        res = modarray(res, [i], m1[i]);
    }
    for (j = 0; j < m2Len; j += 1) {
        res = modarray(res, [i + j], m2[i]);
    }

    return res;
}

/*
 * Returns true if needle exists in haystack
 */
bool in(string needle, stringArray haystack)
{
    return any({ iv -> to_string(haystack[iv]) String::== needle
               | iv < shape(haystack) });
}

/*
 * Returns the index into haystack for the string needle.
 * N.b. before calling this function call in to ensure that the needle you are
 * searching for really is in the haystack!
 */
int[n] indexOf(string needle, stringArray haystack)
{
    o, indices = getIndices(shape(haystack));

    res = { [i] -> to_string(haystack[Array::sel([i], indices)]) String::== needle
                    ? Array::sel([i], indices)
                    : 0 * Array::sel([i], indices)
          | [i] < [o] };

    res = transpose(res);

    res = { [i] -> sum(Array::sel([i], res))
          | [i] < [Array::sel([0], Array::shape(res))] };

    return res;
}

int, int[o,d] getIndices(int[d] shp)
{
    o = prod(shp);
    arr = reshape([o,d], iota(shp));
    return (o, arr);
}
