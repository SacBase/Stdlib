module StringArray;

use String : {string};
use Array : {*,all,-,abs,<,>=,+,zero,++};
export all except {eq_SxS, eq_SxA, eq_AxS, eq_AxA, getIndicies, 
    modarray_AxVxS, sel_VxA, stringArrayCreator, drop};

/*
 * You can create a new stringArray using:
 *   genarray( shp, to_stringArray( "default string")
 *   
 * Modarray and sel work as usual and return stringarrays. Use to_string to 
 * get a string back out of a scalar stringarray.
 */

external typedef stringArray;
    #pragma linkobj "src/StringArray/free.o"
    #pragma linkobj "src/StringArray/copy.o"
    #pragma linkobj "src/StringArray/alloc.o"
    #pragma freefun "SAC_StringArray_free"
    #pragma copyfun "SAC_StringArray_copy"

external stringArray modarray_AxVxS( stringArray labs, int[.] idx, string  str);
    #pragma linkname "SAC_StringArray_modarray"
    #pragma linkobj "src/StringArray/modarray.o"
    #pragma linkobj "src/StringArray/index2offset.o"
    #pragma refcounting [0,1,2,3]
    #pragma linksign [1,2,3,4]

stringArray drop( int[.] v, stringArray array)
{
  vext = _cat_VxV_( v,                                                         
                    Array::genarray( [dim( array) - 
                                      _sel_VxA_( [0], _shape_A_( v))], 
                              0));  
  new_shp = _sub_VxV_( shape( array), abs( vext)); 

  new_shp = where( new_shp < 0, 0, new_shp);
  offset = where( vext < 0, 0, vext);
  offset = where( offset >= shape( array), 0, offset);

  /*  res = with {                                                   
  ( . <= iv <= . ) : _sel_VxA_( _add_VxV_( offset, iv), array);
  } : genarray( new_shp, zero(array));         */

  res = genarray(new_shp, to_stringArray(""));
  indicies = getIndicies( new_shp);
  for ( i=0; i < _sel_VxA_( [0], Array::shape(indicies)); i++){
    res[ Array::sel( [i], indicies)] = 
      array[ _add_VxV_( offset, Array::sel( [i], indicies))];
  }
  
  return( res);
}

inline
int[+] where( bool[+] p, int A, int[+] B)
{
  res = with {
  ( . <= iv <= . ) : _sel_VxA_( iv, p) ? A : _sel_VxA_( iv, B);
  } : genarray( _shape_A_(p), zero(B) );

  return( res);
}

stringArray modarray( stringArray array, int[.] idx, stringArray val)
{
  if( ( Array::any( idx Array::>= shape( array))) || 
      ( Array::any( idx Array::< ( 0 Array::* shape( array))))) {
    RuntimeError::error( 1, 
        "Index out of bounds in call to StringArray::modarray");
  }

  if( Array::sel( [0], Array::shape( idx)) Array::== dim( array)) {
    if( Array::!=( dim( val), 0)) {
      RuntimeError::error( 1, 
          "Attempt to use StringArray::modarray to replace scalar subarray "
          "with non-scalar");
    }
    res = modarray_AxVxS( array, idx, sel_VxA( [], val));
  } 
  else if( Array::sel( [0], Array::shape( idx)) Array::< dim( array)) {
    if( Array::any( 
          shape( val) Array::!= Array::drop( [Array::sel( [0], Array::shape( idx))], 
                                             shape(array)))) {
      RuntimeError::error( 1, 
          "Attempt to use StringArray::modarray to replace subarray with an "
          "array of a different shape");
    }
    val_shp = Array::drop( [Array::sel( [0], Array::shape( idx))], 
                           shape( array));
    indicies = getIndicies( val_shp);
    res = array;
    ub = Array::sel( [0], Array::shape(indicies));
    for( i=0 ; i Array::< ub ; i = i Array::+ 1) {
      selection = Array::sel( [i], indicies);
      modarrayidx = idx Array::++ selection;
      modArrVal = sel_VxA( Array::sel( [i], indicies), val);
      res = modarray_AxVxS( res, modarrayidx, modArrVal);
    }
  }
  else {
    res = array;
    RuntimeError::error( 1, 
        "Overlarge index vector passed to StringArray::modarray");
  }
  return( res);
}

external string sel_VxA( int[.] idx, stringArray labs);
    #pragma linkname "SAC_StringArray_sel"
    #pragma linkobj "src/StringArray/sel.o"
    #pragma linkobj "src/StringArray/index2offset.o"
    #pragma refcounting [0,1,2]
    #pragma linksign [1,2,3]

stringArray sel( int[.] idx, stringArray array)
{
  if( ( Array::any( idx Array::>= shape( array))) || 
      ( Array::any( idx Array::< ( 0 Array::* shape( array))))) {
    RuntimeError::error( 1, 
        "Index out of bounds in call to StringArray::sel");
  }

  if( Array::sel( [0], Array::shape( idx)) Array::== dim( array)) {
    res = to_stringArray( sel_VxA( idx, array));
  } 
  else if( Array::sel( [0], Array::shape( idx)) Array::< dim( array)) {
    idx_len = Array::sel( [0], Array::shape( idx));
    res_shp = Array::drop( [ idx_len ], shape( array));
    if( Array::sel( [0], res_shp) Array::== 0) {
      RuntimeError::error( 1, "res_shape is [0]");
    }
    res = genarray( res_shp, to_stringArray( ""));

    indicies = getIndicies( shape( res));
    for( i=0 ; i Array::< Array::sel( [0], Array::shape(indicies)); i = i Array::+ 1) {
      res = modarray( res, Array::sel( [i], indicies), 
                      sel( idx Array::++ Array::sel( [i], indicies), array));
    }
  }
  else {
    res = array;
    RuntimeError::error( 1, 
        "Attempt to select into a stringArray with an index vector longer than the stringArray's dimensionality");
  }
  return( res);
}

string to_string( stringArray a)
{
  if( dim( a) Array::!= 0) {
    RuntimeError::error( 1,
        "to_string passed non-scalar stringArray");
  }
  return( sel_VxA( [], a));
}

stringArray to_stringArray( string s)
{
  return( stringArrayCreator( [], s));
}

external int dim( stringArray s);
    #pragma linkname "SAC_StringArray_dim"
    #pragma linkobj "src/StringArray/dim.o"
    #pragma refcounting [0,1]
    #pragma linksign [1,2]

external int[.] shape( stringArray s);
    #pragma linkname "SAC_StringArray_shape"
    #pragma linkobj "src/StringArray/shape.o"
    #pragma refcounting [0,1]
    #pragma linksign [1,2]


external stringArray stringArrayCreator( int[.] shp, string s);
    #pragma linkname "SAC_StringArray_genarray"
    #pragma linkobj "src/StringArray/genarray.o"
    #pragma refcounting [0,1,2]
    #pragma linksign [1,2,3]

stringArray genarray( int[.] shp, stringArray s)
{
  new_shp = shp Array::++ shape( s);
  res = stringArrayCreator( new_shp, "");
  indicies = getIndicies( shp);
  for( i=0 ; i Array::< Array::sel( [0], Array::shape( indicies)) ; i = i Array::+ 1) {
    res = modarray( res, Array::sel( [i], indicies), s);
  }
  return( res);
}

inline
bool eq_SxS ( stringArray a, stringArray b)
{
  return( to_string( a) String::== to_string( b));
}

inline
bool[*] eq_SxA( stringArray a, stringArray b)
{
  res = with {
          ( 0* shape(b) <= iv < shape(b)) : to_string( a) String::== sel_VxA( iv, b);
        } : genarray( shape( b), true);
  return( res);
}

inline
bool[*] eq_AxS( stringArray a, stringArray b)
{
  res = with {
          ( 0* shape(a) <= iv < shape(a)) : sel_VxA( iv, a) String::== to_string( b);
        } : genarray( shape( a), true);
  return( res);
}

inline
bool[*] eq_AxA( stringArray a, stringArray b)
{
  res = with {
          ( 0* shape(b) <= iv < shape(b)) : sel_VxA( iv, a) String::== sel_VxA( iv, b);
        } : genarray( shape( b), true);
  return( res);
}

inline
bool[*] ==( stringArray a, stringArray b)
{
  if( dim(a) ScalarArith::== 0) {
    if( dim( b) ScalarArith::== 0 ) {
      res = eq_SxS( a, b);
    } else {
      res = eq_SxA( a, b);
    }
  } else {
    if( dim(b) ScalarArith::== 0) {
      res = eq_AxS( a, b);
    } else if( all( shape( a) Array::== shape(b))) {
      res = eq_AxA( a, b);
    } else {
      RuntimeError::error( 1, "(==) applied to arrays of different shape!");
      res = false;
    }
  }
  return( res);
}

int[.,.] getIndicies( int[.] shp)
{
    iota_shp = Array::iota( shp);
    return(
       Array::reshape(
         [ Array::prod(
             Array::take( [ Array::dim( Array::iota( shp)) Array::- 1 ],
                          Array::shape( iota_shp))),
             Array::sel( [0], Array::reverse( Array::shape( shp))) ],
         iota_shp));
}

/* I'd love to name this funcion ++ but if I do then when I use Structures,
 * ++ on integers can no longer be found.
 * N.b. The specific error is:
 *   No definition found for a function "Structures::++" that accepts an
 *   argument of type "int[0]{}" as parameter no 1. Full argument types
 *   are "( int[0]{}, int[.])".
 */ 
stringArray concatStringArrays( stringArray m1, stringArray m2)
{
  if( dim( m1) Array::== 0) {
    RuntimeError::error( 1, 
        "Cannot concat stringArrays since argument 1 is a scalar");
  }
  if( dim( m2) Array::== 0) {
    RuntimeError::error( 1, 
        "Cannot concat stringArrays since argument 2 is a scalar");
  }
  if( dim( m1) Array::!= dim( m2)) {
    RuntimeError::error( 1, 
        "Cannot concat stringArrays with differing dimensions");
  }
  m1InnerShape = Array::drop( [1] , shape( m1));
  m2InnerShape = Array::drop( [1] , shape( m2));
  if( Array::any( m1InnerShape Array::!= m2InnerShape)) {
    RuntimeError::error( 1, 
        "Attempt to concat non-matching shapes when trying to concat "
        "two stringArrays");
  }
  m1Len = Array::sel( [0], shape( m1));
  m2Len = Array::sel( [0], shape( m2));
  resShape = [ m1Len Array::+ m2Len] Array::++ m1InnerShape;
  res = genarray( resShape, to_stringArray( ""));
  for( i=0 ; i Array::< m1Len ; i = i Array::+ 1) {
    res = modarray( res, [i], sel( [i], m1));
  }
  for( j=0 ; j Array::< m2Len ; j = j Array::+ 1) {
    res = modarray( res, [i Array::+ j], sel( [j], m2));
  }
  return( res); 
}

/*
 * Returns true if needle exists in haystack
 */
bool in( string needle, stringArray haystack)
{
  res = with {
          (0 Array::* shape( haystack) <= iv < shape( haystack)) : 
            to_string( sel( iv, haystack)) String::== needle;
        } : genarray( shape( haystack), false);
  res = Array::any( res);

  /*
   * I'd prefer to use this code! 
   * res = any( { iv -> to_string( haystack[iv]) == needle});
   */

  return( res);
}

/*
 * Returns the index into haystack for the string needle.
 * N.b. before calling this function call in to ensure that the needle you are
 * searching for really is in the haystack!
 */
int[.] indexOf( string needle, stringArray haystack)
{
  /*
   * This code would be a lot nicer if I could scrap the with loops and use the
   * set notation in comments but depsite this working when I tried it in
   * UnibenchInput it fails at compile time when I try it here saying:
   *   No shape information found for index scalar 'i'.
   */

  indicies = getIndicies( shape( haystack));
  /*res = { [i] -> ( to_string( sel( Array::sel( [i], indicies),
                             haystack)) String::== needle ?
                             Array::sel( [i], indicies) : 0 Array::*
                             Array::sel( [i], indicies))};*/

  res = with {
          ( [0] <= [i] < [Array::sel( [0], Array::shape( indicies))]) :
            ( to_string( sel( Array::sel( [i], indicies), haystack)) String::== needle ?
                             Array::sel( [i], indicies) :
                             0 Array::* Array::sel( [i], indicies));
        } : modarray( indicies);



  res = Array::transpose( res);
  /*res = { [i] -> Array::sum( Array::sel( [i], res))};*/

  res = with {
          ( [0] <= iv < [ Array::sel( [0], Array::shape( res))]) :
            Array::sum( Array::sel( iv, res));
        } : genarray( [Array::sel( [0], Array::shape( res))], 0);

  return( res);
}

