module ComplexArrayBasics;

use ComplexBasics: { complex };

#define OVERLOADS dim,shape,sel,reshape,genarray,modarray
use Array: all except { OVERLOADS };
import Array: { OVERLOADS };

export all;

#include "Templates.mac"

/******************************************************************************
 *
 * @fn int dim(complex[*] arr)
 *
 * @brief Yields an array's dimensionality (rank).
 *
 ******************************************************************************/
inline
int dim(complex[*] arr)
{
    d = dim((double[+])arr);
    return d - 1;
}

/******************************************************************************
 *
 * @fn int[.] shape(complex[*] arr)
 *
 * @brief Yields an array's shape vector.
 *
 ******************************************************************************/
inline
int[.] shape(complex[*] arr)
{
    shp = shape((double[+])arr);
    return drop([-1], shp);
}

/******************************************************************************
 *
 * @fn complex[d:shp] sel(int[vlen] idx, complex[vlen:vshp,d:shp] arr)
 *
 * @brief Generalizes selections for scalar indices.
 *
 ******************************************************************************/
inline
complex[d:shp] sel(int[vlen] idx, complex[vlen:vshp,d:shp] arr)
    | all(0 <= idx), all(idx < vshp)
{
    v = ((double[+])arr)[idx];
    return (complex[*])v;
}

inline
complex[d:shp] sel(int idx, complex[n,d:shp] arr)
    | (0 <= idx), (idx < n)
{
    return sel([idx], arr);
}

/******************************************************************************
 *
 * @fn complex[d:shp] reshape(int[d] shp, complex[o:oshp] arr)
 *
 * @brief Creates a new array with identical data vector but new shape, provided
 * the length of the data vector matches the product of the new shape vector.
 *
 ******************************************************************************/
inline
complex[d:shp] reshape(int[d] shp, complex[o:oshp] arr)
  | all(0 <= shp), prod(shp) == prod(oshp)
{
    v = reshape(shp ++ [2], (double[*])arr);
    return (complex[*])v;
}

/******************************************************************************
 *
 * @fn complex[n:shp,m:vshp] genarray(int[n] shp, complex[m:vshp] val)
 *
 * @brief Generates a new array from the given shape and default value.
 *
 ******************************************************************************/
inline
complex[n:shp,m:vshp] genarray(int[n] shp, complex[m:vshp] val)
{
    return { iv -> val | iv < shp };
}

/******************************************************************************
 *
 * @fn complex[o:outer,i:inner] modarray(complex[o:outer,i:inner] arr,
 *                                       int[o] idx, complex[i:inner] val)
 *
 * @brief Modifies the element of array at position idx.
 *
 ******************************************************************************/
inline
complex[o:outer,i:inner] modarray(complex[o:outer,i:inner] arr,
                                  int[o] idx, complex[i:inner] val)
    | all(0 <= idx), all(idx < outer)
{
    return with {
        (idx <= iv <= idx) : val;
    } : modarray(arr);
}

/******************************************************************************
 *
 * @fn complex[n,d:shp] modarray(complex[n,d:shp] arr,
                                 int idx, complex[d:shp] val)
 *
 * @brief Modifies the element of array at position [idx].
 *
 ******************************************************************************/
inline
complex[n,d:shp] modarray(complex[n,d:shp] arr,
                          int idx, complex[d:shp] val)
    | (0 <= idx), (idx < n)
{
    return modarray(arr, [idx], val);
}

/******************************************************************************
 *
 * @fn double[d:shp] norm(complex[d:shp] arr)
 *
 * @brief Yields an array of norms.
 *
 ******************************************************************************/
inline
double[d:shp] norm(complex[d:shp] arr)
{
    return { iv -> ComplexBasics::norm(arr[iv]) | iv < shp };
}

/******************************************************************************
 *
 * @fn double[d:shp] normSq(complex[d:shp] arr)
 *
 * @brief Yields an array of normSq.
 *
 ******************************************************************************/
inline
double[d:shp] normSq(complex[d:shp] arr)
{
    return { iv -> ComplexBasics::normSq(arr[iv]) | iv < shp };
}
