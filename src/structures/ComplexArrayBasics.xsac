module ComplexArrayBasics;

use Array: { all, <, <=, == };
use ComplexBasics: { complex };

export all;

#include "Templates.mac"

/******************************************************************************
 *
 * @fn int dim(complex[*] arr)
 *
 * @brief Yields an array's dimensionality (rank).
 *
 * @note The definition of `dim` and `shape` for user-defined types may not use
 * type patterns, as type patterns rely on the existence of these functions
 * for user-defined types since the primitives `_dim_A_` and `_shape_A_`
 * are not defined for user-defined types.
 *
 ******************************************************************************/
inline int dim(complex[*] arr)
{
    return Array::dim((double[+])arr) Array::- 1;
}

/******************************************************************************
 *
 * @fn int[.] shape(complex[*] arr)
 *
 * @brief Yields an array's shape vector.
 *
 * @note The definition of `dim` and `shape` for user-defined types may not use
 * type patterns, as type patterns rely on the existence of these functions
 * for user-defined types since the primitives `_dim_A_` and `_shape_A_`
 * are not defined for user-defined types.
 *
 ******************************************************************************/
inline int[.] shape(complex[*] arr)
{
    return Array::drop([Array::-1], Array::shape((double[+])arr));
}

/******************************************************************************
 *
 * @fn complex[i:ishp] sel(int[o] idx, complex[o:oshp,i:ishp] arr)
 *
 * @brief Generalizes selections for scalar indices.
 *
 ******************************************************************************/
inline complex[i:ishp] sel(int[o] idx, complex[o:oshp,i:ishp] arr)
    | all(0 <= idx), all(idx < oshp)
{
    return (complex[*])Array::sel(idx, (double[+])arr);
}

inline complex[d:shp] sel(int idx, complex[n,d:shp] arr)
    | (0 <= idx), (idx < n)
{
    return arr[[idx]];
}

/******************************************************************************
 *
 * @fn complex[d:shp] reshape(int[d] shp, complex[o:oshp] arr)
 *
 * @brief Creates a new array with identical data vector but new shape, provided
 * the length of the data vector matches the product of the new shape vector.
 *
 ******************************************************************************/
inline complex[d:shp] reshape(int[d] shp, complex[o:oshp] arr)
    | all(0 <= shp), Array::prod(shp) == Array::prod(oshp)
{
    return (complex[*])Array::reshape(shp Array::++ [2], (double[*])arr);
}

/******************************************************************************
 *
 * @fn complex[n:shp,m:vshp] genarray(int[n] shp, complex[m:vshp] val)
 *
 * @brief Generates a new array from the given shape and default value.
 *
 ******************************************************************************/
inline complex[n:shp,m:vshp] genarray(int[n] shp, complex[m:vshp] val)
{
    return { iv -> val | iv < shp };
}

/******************************************************************************
 *
 * @fn complex[o:oshp,i:ishp] modarray(complex[o:oshp,i:ishp] arr,
 *                                     int[o] idx, complex[i:ishp] val)
 *
 * @brief Modifies the element of array at position idx.
 *
 ******************************************************************************/
inline complex[o:oshp,i:ishp] modarray(complex[o:oshp,i:ishp] arr,
                                       int[o] idx, complex[i:ishp] val)
    | all(0 <= idx), all(idx < oshp)
{
    return with {
        (idx <= iv <= idx) : val;
    } : modarray(arr);
}

/******************************************************************************
 *
 * @fn complex[n,d:shp] modarray(complex[n,d:shp] arr, int idx,
 *                               complex[d:shp] val)
 *
 * @brief Modifies the element of array at position [idx].
 *
 ******************************************************************************/
inline complex[n,d:shp] modarray(complex[n,d:shp] arr, int idx,
                                 complex[d:shp] val)
    | (0 <= idx), (idx < n)
{
    return modarray(arr, [idx], val);
}

/******************************************************************************
 *
 * @fn double[d:shp] norm(complex[d:shp] arr)
 *
 * @brief Yields an array of norms.
 *
 ******************************************************************************/
inline double[d:shp] norm(complex[d:shp] arr)
{
    return { iv -> ComplexBasics::norm(arr[iv]) | iv < shp };
}

/******************************************************************************
 *
 * @fn double[d:shp] normSq(complex[d:shp] arr)
 *
 * @brief Yields an array of normSq.
 *
 ******************************************************************************/
inline double[d:shp] normSq(complex[d:shp] arr)
{
    return { iv -> ComplexBasics::normSq(arr[iv]) | iv < shp };
}
